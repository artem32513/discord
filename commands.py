import discord
from discord.ext import commands, tasks
from datetime import datetime, timedelta
import random
import json
import os
from database import get_user_data, update_user_data, get_gear, update_gear
from economy import COOLDOWNS, GEAR_BONUS_PER_LEVEL, get_gear_cost, check_cooldown

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
with open("config.json", "r") as file:
    config = json.load(file)
    TOKEN = os.getenv("DISCORD_TOKEN", config["TOKEN"])
    PREFIX = config["PREFIX"]
    ROLES_CONFIG = config["roles"]
    WELCOME_CHANNEL = config["welcome_channel"]
    ROLES_CHANNEL = config["roles_channel"]
    ADMIN_CHANNEL = config["admin_channel"]

intents = discord.Intents.all()
bot = commands.Bot(command_prefix=PREFIX, intents=intents)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
last_message_time = {}
voice_activity = {}

# –¶–≤–µ—Ç–∞ –¥–ª—è —ç–º–±–µ–¥–æ–≤
COLORS = {
    "default": discord.Color.blue(),
    "success": discord.Color.green(),
    "error": discord.Color.red(),
    "gold": discord.Color.gold(),
    "purple": discord.Color.purple()
}

# –≠–º–æ–¥–∑–∏
EMOJIS = {
    "gold": "ü™ô",
    "crystals": "üíé",
    "mine": "‚õè",
    "work": "üë∑",
    "profit": "üí∏",
    "daily": "üéÅ",
    "profile": "üë§",
    "gear": "‚öí",
    "rps": "üÜö",
    "blackjack": "üÉè",
    "transfer": "üí∏",
    "give": "üéÅ",
    "buyrole": "üè∑",
    "cooldowns": "‚è≥"
}

class ProfileView(discord.ui.View):
    @discord.ui.button(label="–ü—Ä–æ—Ñ–∏–ª—å", style=discord.ButtonStyle.green, emoji=EMOJIS["profile"])
    async def profile_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        await show_profile(interaction.user, interaction)

class GearView(discord.ui.View):
    @discord.ui.button(label="–ö–∏—Ä–∫–∞", style=discord.ButtonStyle.blurple, emoji=EMOJIS["mine"])
    async def pickaxe(self, interaction: discord.Interaction, button: discord.ui.Button):
        await upgrade_gear(interaction.user, "pickaxe", interaction)

    @discord.ui.button(label="–®–ª–µ–º", style=discord.ButtonStyle.blurple, emoji="‚õë")
    async def helmet(self, interaction: discord.Interaction, button: discord.ui.Button):
        await upgrade_gear(interaction.user, "helmet", interaction)

    @discord.ui.button(label="–ü–µ—Ä—á–∞—Ç–∫–∏", style=discord.ButtonStyle.blurple, emoji="üß§")
    async def gloves(self, interaction: discord.Interaction, button: discord.ui.Button):
        await upgrade_gear(interaction.user, "gloves", interaction)

    @discord.ui.button(label="–ë–æ—Ç–∏–Ω–∫–∏", style=discord.ButtonStyle.blurple, emoji="üë¢")
    async def boots(self, interaction: discord.Interaction, button: discord.ui.Button):
        await upgrade_gear(interaction.user, "boots", interaction)

class ActionView(discord.ui.View):
    @discord.ui.button(label="–î–æ–±—ã—Ç—å", style=discord.ButtonStyle.green, emoji=EMOJIS["mine"])
    async def mine(self, interaction: discord.Interaction, button: discord.ui.Button):
        await mine(interaction.user, interaction)

    @discord.ui.button(label="–†–∞–±–æ—Ç–∞—Ç—å", style=discord.ButtonStyle.green, emoji=EMOJIS["work"])
    async def work(self, interaction: discord.Interaction, button: discord.ui.Button):
        await work(interaction.user, interaction)

    @discord.ui.button(label="–ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–±—ã–ª—å", style=discord.ButtonStyle.green, emoji=EMOJIS["profit"])
    async def profit(self, interaction: discord.Interaction, button: discord.ui.Button):
        await profit(interaction.user, interaction)

    @discord.ui.button(label="–ü—Ä–æ–¥–∞—Ç—å –∫—Ä–∏—Å—Ç–∞–ª–ª—ã", style=discord.ButtonStyle.red, emoji="üí∞")
    async def sell(self, interaction: discord.Interaction, button: discord.ui.Button):
        await sell_crystals(interaction.user, interaction, 100)

    @discord.ui.button(label="–ï–∂–µ–¥–Ω–µ–≤–∫–∞", style=discord.ButtonStyle.grey, emoji=EMOJIS["daily"])
    async def daily(self, interaction: discord.Interaction, button: discord.ui.Button):
        await daily(interaction.user, interaction)

class AdminMessageView(discord.ui.View):
    @discord.ui.button(label="–û—Ç–ø—Ä–∞–≤–∏—Ç—å", style=discord.ButtonStyle.green, emoji="üì©")
    async def send(self, interaction: discord.Interaction, button: discord.ui.Button):
        await admin_message(interaction.user, interaction)

class RoleShopView(discord.ui.View):
    def __init__(self):
        super().__init__(timeout=None)
        self.add_roles()

    def add_roles(self):
        for role_id, price in ROLES_CONFIG.items():
            role = discord.utils.get(bot.get_guild(0).roles, id=int(role_id))
            if role:
                self.add_item(discord.ui.Button(label=f"{role.name} ({price} {EMOJIS['gold']})", style=discord.ButtonStyle.green, custom_id=f"buy_role_{role_id}"))

    async def interaction_check(self, interaction: discord.Interaction):
        if interaction.data["custom_id"].startswith("buy_role_"):
            role_id = interaction.data["custom_id"].split("_")[-1]
            await buy_role(interaction.user, role_id, interaction)
        return True

async def show_profile(user, ctx_or_interaction):
    xp, gold, _, _, crystals, daily_streak, _, _, _ = get_user_data(user.id)
    level = xp // 100
    embed = discord.Embed(
        title=f"üë§ –ü—Ä–æ—Ñ–∏–ª—å {user.name}",
        description=f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ {user.mention}",
        color=COLORS["default"]
    )
    embed.add_field(name=f"–£—Ä–æ–≤–µ–Ω—å {EMOJIS['profile']}", value=f"{level} (XP: {xp})", inline=True)
    embed.add_field(name=f"–ó–æ–ª–æ—Ç—ã–µ –º–æ–Ω–µ—Ç–∫–∏ {EMOJIS['gold']}", value=f"{gold}", inline=True)
    embed.add_field(name=f"–ö—Ä–∏—Å—Ç–∞–ª–ª—ã {EMOJIS['crystals']}", value=f"{crystals}", inline=True)
    embed.add_field(name=f"–°—Ç—Ä–∏–∫ {EMOJIS['daily']}", value=f"{daily_streak} –¥–Ω–µ–π", inline=True)
    embed.set_thumbnail(url=user.avatar.url if user.avatar else None)
    embed.set_image(url="https://i.imgur.com/8pZqL7G.jpeg")  # –ü—Ä–∏–º–µ—Ä –∞–Ω–∏–º–µ-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    if isinstance(ctx_or_interaction, discord.Interaction):
        await ctx_or_interaction.response.send_message(embed=embed, view=ProfileView(), ephemeral=True)
    else:
        await ctx_or_interaction.send(embed=embed, view=ProfileView())

@bot.command(name="profile")
async def profile_cmd(ctx):
    await show_profile(ctx.author, ctx)

@bot.event
async def on_typing(channel, user, when):
    if user.bot:
        return
    if channel.type != discord.ChannelType.text:
        return
    if not channel.permissions_for(channel.guild.me).send_messages:
        return
    if channel.guild is None:
        return
    prefix = PREFIX
    if not user.typing:
        return
    content = user.typing_message.content if user.typing_message else ""
    if content.startswith(prefix):
        embed = discord.Embed(
            title=f"üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è {user.name}",
            description=f"–ò—Å–ø–æ–ª—å–∑—É–π `{prefix}` –ø–µ—Ä–µ–¥ –∫–æ–º–∞–Ω–¥–æ–π:\n\n"
                       f"{EMOJIS['profile']} `profile` ‚Äî –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å\n"
                       f"{EMOJIS['mine']} `mine` ‚Äî –î–æ–±—ã—Ç—å –∫—Ä–∏—Å—Ç–∞–ª–ª—ã\n"
                       f"{EMOJIS['work']} `work` ‚Äî –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å –∑–æ–ª–æ—Ç–æ\n"
                       f"{EMOJIS['profit']} `profit` ‚Äî –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–±—ã–ª—å\n"
                       f"{EMOJIS['daily']} `daily` ‚Äî –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞\n"
                       f"{EMOJIS['gear']} `gear` ‚Äî –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–Ω–∞—Ä—è–∂–µ–Ω–∏–µ\n"
                       f"{EMOJIS['buyrole']} `buyrole` ‚Äî –ö—É–ø–∏—Ç—å —Ä–æ–ª—å\n"
                       f"{EMOJIS['cooldowns']} `cooldowns` ‚Äî –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫—É–ª–¥–∞—É–Ω—ã\n"
                       f"{EMOJIS['rps']} `rps` ‚Äî –ò–≥—Ä–∞ –ö–∞–º–µ–Ω—å, –ù–æ–∂–Ω–∏—Ü—ã, –ë—É–º–∞–≥–∞\n"
                       f"{EMOJIS['blackjack']} `blackjack` ‚Äî –ò–≥—Ä–∞ –ë–ª—ç–∫–¥–∂–µ–∫",
            color=COLORS["purple"]
        )
        embed.set_thumbnail(url="https://i.imgur.com/8pZqL7G.jpeg")
        await channel.send(embed=embed, delete_after=10.0)

@bot.event
async def on_message(message):
    if message.author == bot.user:
        return
    current_time = datetime.utcnow()
    last_time = last_message_time.get(message.author.id, current_time - timedelta(minutes=1))
    if current_time - last_time >= timedelta(minutes=1):
        xp, gold, _, _, crystals, _, _, _, _ = get_user_data(message.author.id)
        xp_gain = 2
        update_user_data(message.author.id, xp=xp_gain)
        last_message_time[message.author.id] = current_time
        if xp % 100 == 0:
            update_user_data(message.author.id, gold=10)
            embed = discord.Embed(
                title="üéâ –ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å!",
                description=f"{message.author.mention}, –≤—ã –¥–æ—Å—Ç–∏–≥–ª–∏ –Ω–æ–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è –∏ –ø–æ–ª—É—á–∏–ª–∏ 10 {EMOJIS['gold']}!",
                color=COLORS["gold"]
            )
            await message.channel.send(embed=embed)
    await bot.process_commands(message)

@bot.event
async def on_voice_state_update(member, before, after):
    if after.channel and not before.channel:
        voice_activity[member.id] = datetime.utcnow()
    elif before.channel and not after.channel and member.id in voice_activity:
        duration = (datetime.utcnow() - voice_activity.pop(member.id)).seconds // 60
        if not before.self_mute and not before.self_deaf:
            earned_gold = duration
            _, helmet_level, _, _ = get_gear(member.id)
            crystals_gain = int(duration * (1 + helmet_level * GEAR_BONUS_PER_LEVEL))
            update_user_data(member.id, gold=earned_gold, crystals=crystals_gain)
            try:
                embed = discord.Embed(
                    title="üéô –ì–æ–ª–æ—Å–æ–≤–æ–π —á–∞—Ç",
                    description=f"–í—ã –ø—Ä–æ–≤–µ–ª–∏ {duration} –º–∏–Ω—É—Ç –≤ –≥–æ–ª–æ—Å–æ–≤–æ–º —á–∞—Ç–µ: +{earned_gold} {EMOJIS['gold']}, +{crystals_gain} {EMOJIS['crystals']}!",
                    color=COLORS["blue"]
                )
                await member.send(embed=embed)
            except discord.Forbidden:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {member.id}")

@bot.event
async def on_member_join(member):
    channel = discord.utils.get(member.guild.text_channels, name=WELCOME_CHANNEL.replace("üîî", "").replace("-", "").lower())
    if channel:
        embed = discord.Embed(
            title=f"üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {member.name}!",
            description=f"–ü—Ä–∏–≤–µ—Ç {member.mention}, —Ç–µ–ø–µ—Ä—å —Ç—ã –Ω–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ Forever Alone. –ü–µ—Ä–µ–π–¥–∏ –∫ –∫–∞–Ω–∞–ª—É #rules, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞!",
            color=COLORS["purple"]
        )
        embed.set_thumbnail(url="https://i.imgur.com/8pZqL7G.jpeg")  # –ê–Ω–∏–º–µ-–∞–≤–∞—Ç–∞—Ä
        embed.set_image(url="https://i.imgur.com/8pZqL7G.jpeg")  # –§–æ–Ω –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è, –∫–∞–∫ –Ω–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç–µ
        await channel.send(embed=embed)

@bot.command(name="mine")
async def mine_cmd(ctx):
    _, _, _, _, _, _, last_mine, _, _ = get_user_data(ctx.author.id)
    can_mine, error = check_cooldown(last_mine, COOLDOWNS["mine"], "–¥–æ–±—ã—á–∏")
    if not can_mine:
        embed = discord.Embed(title="‚è≥ –ö—É–ª–¥–∞—É–Ω", description=f"{ctx.author.mention}, {error}", color=COLORS["error"])
        await ctx.send(embed=embed)
        return
    pickaxe_level, _, _, _ = get_gear(ctx.author.id)
    crystals_gain = int(random.randint(5, 15) * (1 + pickaxe_level * GEAR_BONUS_PER_LEVEL))
    update_user_data(ctx.author.id, crystals=crystals_gain, last_mine=datetime.utcnow().isoformat())
    embed = discord.Embed(
        title=f"{EMOJIS['mine']} –î–æ–±—ã—á–∞",
        description=f"{ctx.author.mention}, –≤—ã –¥–æ–±—ã–ª–∏ {crystals_gain} {EMOJIS['crystals']} –≤ —à–∞—Ö—Ç–µ!",
        color=COLORS["success"]
    )
    await ctx.send(embed=embed, view=ActionView())

async def mine(user, interaction):
    _, _, _, _, _, _, last_mine, _, _ = get_user_data(user.id)
    can_mine, error = check_cooldown(last_mine, COOLDOWNS["mine"], "–¥–æ–±—ã—á–∏")
    if not can_mine:
        await interaction.response.send_message(embed=discord.Embed(title="‚è≥ –ö—É–ª–¥–∞—É–Ω", description=error, color=COLORS["error"]), ephemeral=True)
        return
    pickaxe_level, _, _, _ = get_gear(user.id)
    crystals_gain = int(random.randint(5, 15) * (1 + pickaxe_level * GEAR_BONUS_PER_LEVEL))
    update_user_data(user.id, crystals=crystals_gain, last_mine=datetime.utcnow().isoformat())
    await interaction.response.send_message(embed=discord.Embed(
        title=f"{EMOJIS['mine']} –î–æ–±—ã—á–∞",
        description=f"–í—ã –¥–æ–±—ã–ª–∏ {crystals_gain} {EMOJIS['crystals']} –≤ —à–∞—Ö—Ç–µ!",
        color=COLORS["success"]
    ), ephemeral=True)

@bot.command(name="sell")
async def sell_cmd(ctx, amount: int):
    _, _, _, _, crystals, _, _ = get_user_data(ctx.author.id)
    if amount <= 0 or amount > crystals:
        embed = discord.Embed(
            title="‚ùå –û—à–∏–±–∫–∞",
            description=f"{ctx.author.mention}, —É–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤ (—É –≤–∞—Å {crystals} {EMOJIS['crystals']})!",
            color=COLORS["error"]
        )
        await ctx.send(embed=embed)
        return
    gold_gain = amount // 2
    update_user_data(ctx.author.id, crystals=-amount, gold=gold_gain)
    embed = discord.Embed(
        title="üí∞ –ü—Ä–æ–¥–∞–∂–∞",
        description=f"{ctx.author.mention}, –≤—ã –ø—Ä–æ–¥–∞–ª–∏ {amount} {EMOJIS['crystals']} –∑–∞ {gold_gain} {EMOJIS['gold']}!",
        color=COLORS["gold"]
    )
    await ctx.send(embed=embed, view=ActionView())

async def sell_crystals(user, interaction, amount):
    _, _, _, _, crystals, _, _ = get_user_data(user.id)
    if amount <= 0 or amount > crystals:
        await interaction.response.send_message(embed=discord.Embed(
            title="‚ùå –û—à–∏–±–∫–∞",
            description=f"–£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤ (—É –≤–∞—Å {crystals} {EMOJIS['crystals']})!",
            color=COLORS["error"]
        ), ephemeral=True)
        return
    gold_gain = amount // 2
    update_user_data(user.id, crystals=-amount, gold=gold_gain)
    await interaction.response.send_message(embed=discord.Embed(
        title="üí∞ –ü—Ä–æ–¥–∞–∂–∞",
        description=f"–í—ã –ø—Ä–æ–¥–∞–ª–∏ {amount} {EMOJIS['crystals']} –∑–∞ {gold_gain} {EMOJIS['gold']}!",
        color=COLORS["gold"]
    ), ephemeral=True)

@bot.command(name="work")
async def work_cmd(ctx):
    _, gold, _, _, _, _, _, last_work, _ = get_user_data(ctx.author.id)
    can_work, error = check_cooldown(last_work, COOLDOWNS["work"], "—Ä–∞–±–æ—Ç—ã")
    if not can_work:
        embed = discord.Embed(title="‚è≥ –ö—É–ª–¥–∞—É–Ω", description=f"{ctx.author.mention}, {error}", color=COLORS["error"])
        await ctx.send(embed=embed)
        return
    gold_gain = int(random.randint(5, 10))
    update_user_data(ctx.author.id, gold=gold_gain, last_work=datetime.utcnow().isoformat())
    embed = discord.Embed(
        title=f"{EMOJIS['work']} –†–∞–±–æ—Ç–∞",
        description=f"{ctx.author.mention}, –≤—ã –ø–æ—Ä–∞–±–æ—Ç–∞–ª–∏ –∏ –ø–æ–ª—É—á–∏–ª–∏ {gold_gain} {EMOJIS['gold']}!",
        color=COLORS["success"]
    )
    await ctx.send(embed=embed, view=ActionView())

async def work(user, interaction):
    _, gold, _, _, _, _, _, last_work, _ = get_user_data(user.id)
    can_work, error = check_cooldown(last_work, COOLDOWNS["work"], "—Ä–∞–±–æ—Ç—ã")
    if not can_work:
        await interaction.response.send_message(embed=discord.Embed(title="‚è≥ –ö—É–ª–¥–∞—É–Ω", description=error, color=COLORS["error"]), ephemeral=True)
        return
    gold_gain = int(random.randint(5, 10))
    update_user_data(user.id, gold=gold_gain, last_work=datetime.utcnow().isoformat())
    await interaction.response.send_message(embed=discord.Embed(
        title=f"{EMOJIS['work']} –†–∞–±–æ—Ç–∞",
        description=f"–í—ã –ø–æ—Ä–∞–±–æ—Ç–∞–ª–∏ –∏ –ø–æ–ª—É—á–∏–ª–∏ {gold_gain} {EMOJIS['gold']}!",
        color=COLORS["success"]
    ), ephemeral=True)

@bot.command(name="daily")
async def daily_cmd(ctx):
    _, gold, last_daily, _, crystals, daily_streak, _, _, _ = get_user_data(ctx.author.id)
    can_daily, error = check_cooldown(last_daily, COOLDOWNS["daily"], "–µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –Ω–∞–≥—Ä–∞–¥—ã")
    if not can_daily:
        embed = discord.Embed(title="‚ùå –û—à–∏–±–∫–∞", description=f"{ctx.author.mention}, {error}", color=COLORS["error"])
        await ctx.send(embed=embed)
        return
    daily_multiplier = 1 + (daily_streak * 0.1)
    gold_reward = int(random.randint(10, 20) * daily_multiplier)
    crystals_reward = int(random.randint(5, 10) * daily_multiplier)
    new_streak = daily_streak + 1 if last_daily and (datetime.utcnow() - datetime.fromisoformat(last_daily)).days == 1 else 1
    update_user_data(ctx.author.id, gold=gold_reward, crystals=crystals_reward, last_daily=datetime.utcnow().isoformat(), daily_streak=new_streak)
    embed = discord.Embed(
        title=f"{EMOJIS['daily']} –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞",
        description=f"{ctx.author.mention}, –≤—ã –ø–æ–ª—É—á–∏–ª–∏: {gold_reward} {EMOJIS['gold']}, {crystals_reward} {EMOJIS['crystals']}! –°—Ç—Ä–∏–∫: {new_streak} –¥–Ω–µ–π.",
        color=COLORS["gold"]
    )
    await ctx.send(embed=embed, view=ActionView())

async def daily(user, interaction):
    _, gold, last_daily, _, crystals, daily_streak, _, _, _ = get_user_data(user.id)
    can_daily, error = check_cooldown(last_daily, COOLDOWNS["daily"], "–µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π –Ω–∞–≥—Ä–∞–¥—ã")
    if not can_daily:
        await interaction.response.send_message(embed=discord.Embed(title="‚ùå –û—à–∏–±–∫–∞", description=error, color=COLORS["error"]), ephemeral=True)
        return
    daily_multiplier = 1 + (daily_streak * 0.1)
    gold_reward = int(random.randint(10, 20) * daily_multiplier)
    crystals_reward = int(random.randint(5, 10) * daily_multiplier)
    new_streak = daily_streak + 1 if last_daily and (datetime.utcnow() - datetime.fromisoformat(last_daily)).days == 1 else 1
    update_user_data(user.id, gold=gold_reward, crystals=crystals_reward, last_daily=datetime.utcnow().isoformat(), daily_streak=new_streak)
    await interaction.response.send_message(embed=discord.Embed(
        title=f"{EMOJIS['daily']} –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞",
        description=f"–í—ã –ø–æ–ª—É—á–∏–ª–∏: {gold_reward} {EMOJIS['gold']}, {crystals_reward} {EMOJIS['crystals']}! –°—Ç—Ä–∏–∫: {new_streak} –¥–Ω–µ–π.",
        color=COLORS["gold"]
    ), ephemeral=True)

@bot.command(name="profit")
async def profit_cmd(ctx):
    _, gold, _, _, _, _, _, _, last_profit = get_user_data(ctx.author.id)
    can_profit, error = check_cooldown(last_profit, COOLDOWNS["profit"], "–ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–±—ã–ª–∏")
    if not can_profit:
        embed = discord.Embed(title="‚è≥ –ö—É–ª–¥–∞—É–Ω", description=f"{ctx.author.mention}, {error}", color=COLORS["error"])
        await ctx.send(embed=embed)
        return
    base_chance = 0.2
    profit = int(random.randint(50, 100)) if random.random() < base_chance else 0
    update_user_data(ctx.author.id, gold=profit, last_profit=datetime.utcnow().isoformat())
    if profit:
        embed = discord.Embed(
            title=f"{EMOJIS['profit']} –ü—Ä–∏–±—ã–ª—å",
            description=f"{ctx.author.mention}, –≤—ã –ø–æ–ª—É—á–∏–ª–∏ –ø—Ä–∏–±—ã–ª—å {profit} {EMOJIS['gold']}!",
            color=COLORS["success"]
        )
    else:
        embed = discord.Embed(
            title="üòî –ù–µ—É–¥–∞—á–∞",
            description=f"{ctx.author.mention}, —É–¥–∞—á–∞ –Ω–µ –Ω–∞ –≤–∞—à–µ–π —Å—Ç–æ—Ä–æ–Ω–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ 4 —á–∞—Å–∞!",
            color=COLORS["error"]
        )
    await ctx.send(embed=embed, view=ActionView())

async def profit(user, interaction):
    _, gold, _, _, _, _, _, _, last_profit = get_user_data(user.id)
    can_profit, error = check_cooldown(last_profit, COOLDOWNS["profit"], "–ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–∏–±—ã–ª–∏")
    if not can_profit:
        await interaction.response.send_message(embed=discord.Embed(title="‚è≥ –ö—É–ª–¥–∞—É–Ω", description=error, color=COLORS["error"]), ephemeral=True)
        return
    base_chance = 0.2
    profit = int(random.randint(50, 100)) if random.random() < base_chance else 0
    update_user_data(user.id, gold=profit, last_profit=datetime.utcnow().isoformat())
    if profit:
        await interaction.response.send_message(embed=discord.Embed(
            title=f"{EMOJIS['profit']} –ü—Ä–∏–±—ã–ª—å",
            description=f"–í—ã –ø–æ–ª—É—á–∏–ª–∏ –ø—Ä–∏–±—ã–ª—å {profit} {EMOJIS['gold']}!",
            color=COLORS["success"]
        ), ephemeral=True)
    else:
        await interaction.response.send_message(embed=discord.Embed(
            title="üòî –ù–µ—É–¥–∞—á–∞",
            description="–£–¥–∞—á–∞ –Ω–µ –Ω–∞ –≤–∞—à–µ–π —Å—Ç–æ—Ä–æ–Ω–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ 4 —á–∞—Å–∞!",
            color=COLORS["error"]
        ), ephemeral=True)

@bot.command(name="gear")
async def gear_cmd(ctx):
    pickaxe_level, helmet_level, gloves_level, boots_level = get_gear(ctx.author.id)
    embed = discord.Embed(
        title=f"{EMOJIS['gear']} –°–Ω–∞—Ä—è–∂–µ–Ω–∏–µ —à–∞—Ö—Ç—ë—Ä–∞",
        description=f"–í–∞—à–µ –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ, {ctx.author.mention}",
        color=COLORS["orange"]
    )
    embed.add_field(name=f"–ö–∏—Ä–∫–∞ {EMOJIS['mine']}", value=f"–£—Ä–æ–≤–µ–Ω—å {pickaxe_level}: +{pickaxe_level * 5}% –∫ –¥–æ–±—ã—á–µ {EMOJIS['crystals']}", inline=True)
    embed.add_field(name=f"–®–ª–µ–º ‚õë", value=f"–£—Ä–æ–≤–µ–Ω—å {helmet_level}: +{helmet_level * 5}% –∫ {EMOJIS['crystals']} –æ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —á–∞—Ç–∞", inline=True)
    embed.add_field(name=f"–ü–µ—Ä—á–∞—Ç–∫–∏ üß§", value=f"–£—Ä–æ–≤–µ–Ω—å {gloves_level}: +{gloves_level * 5}% –∫ {EMOJIS['crystals']} –æ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —á–∞—Ç–∞", inline=True)
    embed.add_field(name=f"–ë–æ—Ç–∏–Ω–∫–∏ üë¢", value=f"–£—Ä–æ–≤–µ–Ω—å {boots_level}: +{boots_level * 5}% –∫ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–º {EMOJIS['crystals']}", inline=True)
    embed.set_thumbnail(url="https://i.imgur.com/8pZqL7G.jpeg")  # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —à–∞—Ö—Ç—ë—Ä–∞
    await ctx.send(embed=embed, view=GearView())

async def upgrade_gear(user, gear_name, interaction):
    gear_map = {"pickaxe": "pickaxe_level", "helmet": "helmet_level", "gloves": "gloves_level", "boots": "boots_level"}
    if gear_name not in gear_map:
        await interaction.response.send_message(embed=discord.Embed(
            title="‚ùå –û—à–∏–±–∫–∞",
            description="–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–µ–¥–º–µ—Ç—ã: pickaxe, helmet, gloves, boots",
            color=COLORS["error"]
        ), ephemeral=True)
        return
    _, _, _, _, crystals, _, _ = get_user_data(user.id)
    pickaxe_level, helmet_level, gloves_level, boots_level = get_gear(user.id)
    current_level = {"pickaxe_level": pickaxe_level, "helmet_level": helmet_level, "gloves_level": gloves_level, "boots_level": boots_level}[gear_map[gear_name]]
    cost = get_gear_cost(current_level)
    if crystals < cost:
        await interaction.response.send_message(embed=discord.Embed(
            title="‚ùå –û—à–∏–±–∫–∞",
            description=f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤! –ù—É–∂–Ω–æ: {cost} {EMOJIS['crystals']}",
            color=COLORS["error"]
        ), ephemeral=True)
        return
    update_user_data(user.id, crystals=-cost)
    if gear_name == "pickaxe":
        update_gear(user.id, pickaxe_level=current_level + 1)
    elif gear_name == "helmet":
        update_gear(user.id, helmet_level=current_level + 1)
    elif gear_name == "gloves":
        update_gear(user.id, gloves_level=current_level + 1)
    elif gear_name == "boots":
        update_gear(user.id, boots_level=current_level + 1)
    embed = discord.Embed(
        title="‚úÖ –£–ª—É—á—à–µ–Ω–∏–µ",
        description=f"–í—ã —É–ª—É—á—à–∏–ª–∏ {gear_name} –¥–æ —É—Ä–æ–≤–Ω—è {current_level + 1} –∑–∞ {cost} {EMOJIS['crystals']}!",
        color=COLORS["success"]
    )
    await interaction.response.send_message(embed=embed, ephemeral=True)

@bot.command(name="upgrade_gear")
async def upgrade_gear_cmd(ctx):
    pickaxe_level, helmet_level, gloves_level, boots_level = get_gear(ctx.author.id)
    embed = discord.Embed(
        title=f"{EMOJIS['gear']} –ú–µ–Ω—é —É–ª—É—á—à–µ–Ω–∏–π —Å–Ω–∞—Ä—è–∂–µ–Ω–∏—è",
        description=f"–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–µ–¥–º–µ—Ç –¥–ª—è –ø—Ä–æ–∫–∞—á–∫–∏, {ctx.author.mention}",
        color=COLORS["orange"]
    )
    embed.add_field(name=f"–ö–∏—Ä–∫–∞ {EMOJIS['mine']}", value=f"–£—Ä–æ–≤–µ–Ω—å {pickaxe_level}: +{pickaxe_level * 5}% –∫ –¥–æ–±—ã—á–µ {EMOJIS['crystals']}\n–¶–µ–Ω–∞: {get_gear_cost(pickaxe_level)} {EMOJIS['crystals']}", inline=True)
    embed.add_field(name=f"–®–ª–µ–º ‚õë", value=f"–£—Ä–æ–≤–µ–Ω—å {helmet_level}: +{helmet_level * 5}% –∫ {EMOJIS['crystals']} –æ—Ç –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —á–∞—Ç–∞\n–¶–µ–Ω–∞: {get_gear_cost(helmet_level)} {EMOJIS['crystals']}", inline=True)
    embed.add_field(name=f"–ü–µ—Ä—á–∞—Ç–∫–∏ üß§", value=f"–£—Ä–æ–≤–µ–Ω—å {gloves_level}: +{gloves_level * 5}% –∫ {EMOJIS['crystals']} –æ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —á–∞—Ç–∞\n–¶–µ–Ω–∞: {get_gear_cost(gloves_level)} {EMOJIS['crystals']}", inline=True)
    embed.add_field(name=f"–ë–æ—Ç–∏–Ω–∫–∏ üë¢", value=f"–£—Ä–æ–≤–µ–Ω—å {boots_level}: +{boots_level * 5}% –∫ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–º {EMOJIS['crystals']}\n–¶–µ–Ω–∞: {get_gear_cost(boots_level)} {EMOJIS['crystals']}", inline=True)
    embed.set_thumbnail(url="https://i.imgur.com/8pZqL7G.jpeg")
    await ctx.send(embed=embed, view=GearView())

@bot.command(name="rps")
async def rps_cmd(ctx, opponent: discord.Member):
    options = ["–∫–∞–º–µ–Ω—å", "–Ω–æ–∂–Ω–∏—Ü—ã", "–±—É–º–∞–≥–∞"]
    embed = discord.Embed(
        title=f"{EMOJIS['rps']} –ö–∞–º–µ–Ω—å, –ù–æ–∂–Ω–∏—Ü—ã, –ë—É–º–∞–≥–∞",
        description=f"{ctx.author.mention} –ø—Ä–æ—Ç–∏–≤ {opponent.mention}! –í—ã–±–µ—Ä–∏—Ç–µ: '–∫–∞–º–µ–Ω—å', '–Ω–æ–∂–Ω–∏—Ü—ã' –∏–ª–∏ '–±—É–º–∞–≥–∞'.",
        color=COLORS["purple"]
    )
    await ctx.send(embed=embed)
    def check(m):
        return m.author in [ctx.author, opponent] and m.content.lower() in options

    try:
        player_msg = await bot.wait_for("message", check=check, timeout=30)
        opp_msg = await bot.wait_for("message", check=check, timeout=30)
        player_choice = player_msg.content.lower()
        opp_choice = opp_msg.content.lower()

        if player_choice == opp_choice:
            result = "ü§ù –ù–∏—á—å—è!"
        elif (player_choice == "–∫–∞–º–µ–Ω—å" and opp_choice == "–Ω–æ–∂–Ω–∏—Ü—ã") or \
             (player_choice == "–Ω–æ–∂–Ω–∏—Ü—ã" and opp_choice == "–±—É–º–∞–≥–∞") or \
             (player_choice == "–±—É–º–∞–≥–∞" and opp_choice == "–∫–∞–º–µ–Ω—å"):
            result = f"üéâ {ctx.author.mention} –ø–æ–±–µ–¥–∏–ª!"
        else:
            result = f"üéâ {opponent.mention} –ø–æ–±–µ–¥–∏–ª!"
        embed = discord.Embed(
            title=f"{EMOJIS['rps']} –†–µ–∑—É–ª—å—Ç–∞—Ç",
            description=f"{ctx.author.mention} –≤—ã–±—Ä–∞–ª {player_choice}, {opponent.mention} –≤—ã–±—Ä–∞–ª {opp_choice}. {result}",
            color=COLORS["purple"]
        )
        await ctx.send(embed=embed)
    except asyncio.TimeoutError:
        embed = discord.Embed(
            title="‚è≥ –¢–∞–π–º-–∞—É—Ç",
            description="–í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ! –ò–≥—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.",
            color=COLORS["error"]
        )
        await ctx.send(embed=embed)

@bot.command(name="blackjack")
async def blackjack_cmd(ctx, opponent: discord.Member, bet: int):
    if bet <= 0:
        embed = discord.Embed(
            title="‚ùå –û—à–∏–±–∫–∞",
            description="–°—Ç–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–π!",
            color=COLORS["error"]
        )
        await ctx.send(embed=embed)
        return
    _, gold, _, _, _, _, _, _, _ = get_user_data(ctx.author.id)
    _, opp_gold, _, _, _, _, _, _, _ = get_user_data(opponent.id)
    if gold < bet or opp_gold < bet:
        embed = discord.Embed(
            title="‚ùå –û—à–∏–±–∫–∞",
            description="–£ –æ–¥–Ω–æ–≥–æ –∏–∑ –∏–≥—Ä–æ–∫–æ–≤ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç—ã—Ö –º–æ–Ω–µ—Ç!",
            color=COLORS["error"]
        )
        await ctx.send(embed=embed)
        return

    def draw_card():
        return random.choice([2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 10, 10, 11])

    def hand_value(hand):
        value = sum(hand)
        ace_count = hand.count(11)
        while value > 21 and ace_count:
            value -= 10
            ace_count -= 1
        return value

    player_hand = [draw_card(), draw_card()]
    opp_hand = [draw_card(), draw_card()]
    player_value = hand_value(player_hand)
    opp_value = hand_value(opp_hand)

    if player_value == 21 and opp_value != 21:
        update_user_data(ctx.author.id, gold=bet)
        update_user_data(opponent.id, gold=-bet)
        embed = discord.Embed(
            title=f"{EMOJIS['blackjack']} –ë–ª—ç–∫–¥–∂–µ–∫",
            description=f"{ctx.author.mention} –≤—ã–∏–≥—Ä–∞–ª —Å Blackjack! ({player_hand} = {player_value}) –ø—Ä–æ—Ç–∏–≤ {opp_hand} = {opp_value}. +{bet} {EMOJIS['gold']}!",
            color=COLORS["success"]
        )
        await ctx.send(embed=embed)
        return
    elif opp_value == 21 and player_value != 21:
        update_user_data(ctx.author.id, gold=-bet)
        update_user_data(opponent.id, gold=bet)
        embed = discord.Embed(
            title=f"{EMOJIS['blackjack']} –ë–ª—ç–∫–¥–∂–µ–∫",
            description=f"{opponent.mention} –≤—ã–∏–≥—Ä–∞–ª —Å Blackjack! ({opp_hand} = {opp_value}) –ø—Ä–æ—Ç–∏–≤ {player_hand} = {player_value}. +{bet} {EMOJIS['gold']}!",
            color=COLORS["success"]
        )
        await ctx.send(embed=embed)
        return
    elif player_value == 21 and opp_value == 21:
        embed = discord.Embed(
            title=f"{EMOJIS['blackjack']} –ë–ª—ç–∫–¥–∂–µ–∫",
            description=f"–ù–∏—á—å—è —Å Blackjack! ({player_hand} = {player_value}) –ø—Ä–æ—Ç–∏–≤ ({opp_hand} = {opp_value}).",
            color=COLORS["grey"]
        )
        await ctx.send(embed=embed)
        return

    embed = discord.Embed(
        title=f"{EMOJIS['blackjack']} –ë–ª—ç–∫–¥–∂–µ–∫",
        description=f"{ctx.author.mention}, –≤–∞—à–∞ —Ä—É–∫–∞: {player_hand} (—Å—É–º–º–∞: {player_value}). –ù–∞–ø–∏—à–∏—Ç–µ 'hit' –∏–ª–∏ 'stand'.\n{opponent.mention}, –≤–∞—à–∞ —Ä—É–∫–∞: {opp_hand} (—Å—É–º–º–∞: {opp_value}). –ù–∞–ø–∏—à–∏—Ç–µ 'hit' –∏–ª–∏ 'stand'.",
        color=COLORS["purple"]
    )
    await ctx.send(embed=embed)

    def check(m):
        return m.author in [ctx.author, opponent] and m.content.lower() in ["hit", "stand"]

    player_done = False
    opp_done = False
    while not (player_done and opp_done):
        try:
            msg = await bot.wait_for("message", check=check, timeout=30)
            if msg.author == ctx.author and not player_done:
                if msg.content.lower() == "hit":
                    player_hand.append(draw_card())
                    player_value = hand_value(player_hand)
                    embed = discord.Embed(
                        title=f"{EMOJIS['blackjack']} –ë–ª—ç–∫–¥–∂–µ–∫",
                        description=f"{ctx.author.mention}, –≤–∞—à–∞ —Ä—É–∫–∞: {player_hand} (—Å—É–º–º–∞: {player_value}).",
                        color=COLORS["purple"]
                    )
                    await ctx.send(embed=embed)
                else:
                    player_done = True
                if player_value > 21:
                    update_user_data(ctx.author.id, gold=-bet)
                    update_user_data(opponent.id, gold=bet)
                    embed = discord.Embed(
                        title="üí• –ü–µ—Ä–µ–±–æ—Ä",
                        description=f"{ctx.author.mention} –ø–µ—Ä–µ–±–æ—Ä ({player_value})! {opponent.mention} –≤—ã–∏–≥—Ä–∞–ª {bet} {EMOJIS['gold']}!",
                        color=COLORS["error"]
                    )
                    await ctx.send(embed=embed)
                    return
            elif msg.author == opponent and not opp_done:
                if msg.content.lower() == "hit":
                    opp_hand.append(draw_card())
                    opp_value = hand_value(opp_hand)
                    embed = discord.Embed(
                        title=f"{EMOJIS['blackjack']} –ë–ª—ç–∫–¥–∂–µ–∫",
                        description=f"{opponent.mention}, –≤–∞—à–∞ —Ä—É–∫–∞: {opp_hand} (—Å—É–º–º–∞: {opp_value}).",
                        color=COLORS["purple"]
                    )
                    await ctx.send(embed=embed)
                else:
                    opp_done = True
                if opp_value > 21:
                    update_user_data(ctx.author.id, gold=bet)
                    update_user_data(opponent.id, gold=-bet)
                    embed = discord.Embed(
                        title="üí• –ü–µ—Ä–µ–±–æ—Ä",
                        description=f"{opponent.mention} –ø–µ—Ä–µ–±–æ—Ä ({opp_value})! {ctx.author.mention} –≤—ã–∏–≥—Ä–∞–ª {bet} {EMOJIS['gold']}!",
                        color=COLORS["error"]
                    )
                    await ctx.send(embed=embed)
                    return
        except asyncio.TimeoutError:
            embed = discord.Embed(
                title="‚è≥ –¢–∞–π–º-–∞—É—Ç",
                description="–í—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ! –ù–∏—á—å—è.",
                color=COLORS["error"]
            )
            await ctx.send(embed=embed)
            return

    if player_value > opp_value:
        update_user_data(ctx.author.id, gold=bet)
        update_user_data(opponent.id, gold=-bet)
        embed = discord.Embed(
            title="üèÜ –ü–æ–±–µ–¥–∞",
            description=f"{ctx.author.mention} –≤—ã–∏–≥—Ä–∞–ª ({player_value}) –ø—Ä–æ—Ç–∏–≤ ({opp_value})! +{bet} {EMOJIS['gold']}!",
            color=COLORS["success"]
        )
        await ctx.send(embed=embed)
    elif opp_value > player_value:
        update_user_data(ctx.author.id, gold=-bet)
        update_user_data(opponent.id, gold=bet)
        embed = discord.Embed(
            title="üèÜ –ü–æ–±–µ–¥–∞",
            description=f"{opponent.mention} –≤—ã–∏–≥—Ä–∞–ª ({opp_value}) –ø—Ä–æ—Ç–∏–≤ ({player_value})! +{bet} {EMOJIS['gold']}!",
            color=COLORS["success"]
        )
        await ctx.send(embed=embed)
    else:
        embed = discord.Embed(
            title="‚öñÔ∏è –ù–∏—á—å—è",
            description=f"–ù–∏—á—å—è ({player_value}) –ø—Ä–æ—Ç–∏–≤ ({opp_value}).",
            color=COLORS["grey"]
        )
        await ctx.send(embed=embed)

@bot.command(name="cooldowns")
async def cooldowns_cmd(ctx):
    _, _, _, _, _, _, last_mine, last_work, last_profit = get_user_data(ctx.author.id)
    now = datetime.utcnow()
    cooldowns = []
    
    if last_mine:
        remaining = int(COOLDOWNS["mine"] - (now - datetime.fromisoformat(last_mine)).total_seconds())
        if remaining > 0:
            minutes = remaining // 60
            seconds = remaining % 60
            cooldowns.append(f"{EMOJIS['mine']} –î–æ–±—ã—á–∞: {minutes} –º–∏–Ω {seconds} —Å–µ–∫")

    if last_work:
        remaining = int(COOLDOWNS["work"] - (now - datetime.fromisoformat(last_work)).total_seconds())
        if remaining > 0:
            hours = remaining // 3600
            minutes = (remaining % 3600) // 60
            cooldowns.append(f"{EMOJIS['work']} –†–∞–±–æ—Ç–∞: {hours} —á {minutes} –º–∏–Ω")

    if last_profit:
        remaining = int(COOLDOWNS["profit"] - (now - datetime.fromisoformat(last_profit)).total_seconds())
        if remaining > 0:
            hours = remaining // 3600
            minutes = (remaining % 3600) // 60
            cooldowns.append(f"{EMOJIS['profit']} –ü—Ä–∏–±—ã–ª—å: {hours} —á {minutes} –º–∏–Ω")

    if last_daily and (now - datetime.fromisoformat(last_daily)).days < 1:
        remaining = int(COOLDOWNS["daily"] - (now - datetime.fromisoformat(last_daily)).total_seconds())
        hours = remaining // 3600
        minutes = (remaining % 3600) // 60
        cooldowns.append(f"{EMOJIS['daily']} –ï–∂–µ–¥–Ω–µ–≤–∫–∞: {hours} —á {minutes} –º–∏–Ω")

    if cooldowns:
        embed = discord.Embed(
            title=f"{EMOJIS['cooldowns']} –ö—É–ª–¥–∞—É–Ω—ã",
            description="\n".join(cooldowns),
            color=COLORS["error"]
        )
        await ctx.send(embed=embed)
    else:
        embed = discord.Embed(
            title="‚úÖ –ö—É–ª–¥–∞—É–Ω—ã",
            description=f"{ctx.author.mention}, –≤—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã!",
            color=COLORS["success"]
        )
        await ctx.send(embed=embed)

@bot.command(name="transfer")
async def transfer_cmd(ctx, member: discord.Member, currency: str, amount: int):
    if amount <= 0:
        embed = discord.Embed(
            title="‚ùå –û—à–∏–±–∫–∞",
            description="–£–∫–∞–∂–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ!",
            color=COLORS["error"]
        )
        await ctx.send(embed=embed)
        return
    _, gold, _, _, crystals, _, _, _, _ = get_user_data(ctx.author.id)
    if currency.lower() == "gold" and gold >= amount:
        update_user_data(ctx.author.id, gold=-amount)
        update_user_data(member.id, gold=amount)
        embed = discord.Embed(
            title=f"{EMOJIS['transfer']} –ü–µ—Ä–µ–¥–∞—á–∞",
            description=f"{ctx.author.mention} –ø–µ—Ä–µ–¥–∞–ª {amount} {EMOJIS['gold']} {member.mention}!",
            color=COLORS["gold"]
        )
        await ctx.send(embed=embed)
    elif currency.lower() == "crystals" and crystals >= amount:
        update_user_data(ctx.author.id, crystals=-amount)
        update_user_data(member.id, crystals=amount)
        embed = discord.Embed(
            title="üíé –ü–µ—Ä–µ–¥–∞—á–∞",
            description=f"{ctx.author.mention} –ø–µ—Ä–µ–¥–∞–ª {amount} {EMOJIS['crystals']} {member.mention}!",
            color=COLORS["blue"]
        )
        await ctx.send(embed=embed)
    else:
        embed = discord.Embed(
            title="‚ùå –û—à–∏–±–∫–∞",
            description=f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ {currency} –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω–∞—è –≤–∞–ª—é—Ç–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'gold' –∏–ª–∏ 'crystals'.",
            color=COLORS["error"]
        )
        await ctx.send(embed=embed)

@bot.command(name="give")
@commands.has_permissions(administrator=True)
async def give_cmd(ctx, member: discord.Member, currency: str, amount: int):
    if amount <= 0:
        embed = discord.Embed(
            title="‚ùå –û—à–∏–±–∫–∞",
            description="–£–∫–∞–∂–∏—Ç–µ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ!",
            color=COLORS["error"]
        )
        await ctx.send(embed=embed)
        return
    if currency.lower() == "gold":
        update_user_data(member.id, gold=amount)
        embed = discord.Embed(
            title=f"{EMOJIS['give']} –í—ã–¥–∞—á–∞",
            description=f"–ê–¥–º–∏–Ω {ctx.author.mention} –≤—ã–¥–∞–ª {amount} {EMOJIS['gold']} {member.mention}!",
            color=COLORS["gold"]
        )
        await ctx.send(embed=embed)
    elif currency.lower() == "crystals":
        update_user_data(member.id, crystals=amount)
        embed = discord.Embed(
            title="üíé –í—ã–¥–∞—á–∞",
            description=f"–ê–¥–º–∏–Ω {ctx.author.mention} –≤—ã–¥–∞–ª {amount} {EMOJIS['crystals']} {member.mention}!",
            color=COLORS["blue"]
        )
        await ctx.send(embed=embed)
    else:
        embed = discord.Embed(
            title="‚ùå –û—à–∏–±–∫–∞",
            description="–ù–µ–≤–µ—Ä–Ω–∞—è –≤–∞–ª—é—Ç–∞! –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ 'gold' –∏–ª–∏ 'crystals'.",
            color=COLORS["error"]
        )
        await ctx.send(embed=embed)

@bot.command(name="buyrole")
async def buyrole_cmd(ctx):
    embed = discord.Embed(
        title=f"{EMOJIS['buyrole']} –ú–∞–≥–∞–∑–∏–Ω —Ä–æ–ª–µ–π",
        description=f"–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –¥–ª—è –ø–æ–∫—É–ø–∫–∏, {ctx.author.mention}",
        color=COLORS["gold"]
    )
    for role_id, price in ROLES_CONFIG.items():
        role = discord.utils.get(ctx.guild.roles, id=int(role_id))
        if role:
            embed.add_field(name=f"{role.name}", value=f"–¶–µ–Ω–∞: {price} {EMOJIS['gold']}", inline=True)
    embed.set_thumbnail(url="https://i.imgur.com/8pZqL7G.jpeg")  # –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –º–æ–Ω–µ—Ç–∫–∏
    await ctx.send(embed=embed, view=RoleShopView())

async def buy_role(user, role_id, interaction):
    role = discord.utils.get(interaction.guild.roles, id=int(role_id))
    if not role or "staff" in role.name.lower():
        await interaction.response.send_message(embed=discord.Embed(
            title="‚ùå –û—à–∏–±–∫–∞",
            description="–≠—Ç–∞ —Ä–æ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –ø–æ–∫—É–ø–∫–∏!",
            color=COLORS["error"]
        ), ephemeral=True)
        return
    price = ROLES_CONFIG.get(role_id, 0)
    _, gold, _, _, _, _, _, _, _ = get_user_data(user.id)
    if gold < price:
        await interaction.response.send_message(embed=discord.Embed(
            title="‚ùå –û—à–∏–±–∫–∞",
            description=f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–æ–ª–æ—Ç—ã—Ö –º–æ–Ω–µ—Ç! –ù—É–∂–Ω–æ: {price} {EMOJIS['gold']}",
            color=COLORS["error"]
        ), ephemeral=True)
        return
    update_user_data(user.id, gold=-price)
    await user.add_roles(role)
    embed = discord.Embed(
        title="‚úÖ –ü–æ–∫—É–ø–∫–∞ —Ä–æ–ª–∏",
        description=f"–í—ã –∫—É–ø–∏–ª–∏ —Ä–æ–ª—å {role.name} –∑–∞ {price} {EMOJIS['gold']}!",
        color=COLORS["success"]
    )
    await interaction.response.send_message(embed=embed, ephemeral=True)

@bot.command(name="set_role_price")
@commands.has_permissions(administrator=True)
async def set_role_price_cmd(ctx, role: discord.Role, price: int):
    if price < 0:
        embed = discord.Embed(
            title="‚ùå –û—à–∏–±–∫–∞",
            description="–¶–µ–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–π!",
            color=COLORS["error"]
        )
        await ctx.send(embed=embed)
        return
    ROLES_CONFIG[str(role.id)] = price
    with open("config.json", "w") as file:
        json.dump({"TOKEN": TOKEN, "PREFIX": PREFIX, "roles": ROLES_CONFIG, "welcome_channel": WELCOME_CHANNEL, "roles_channel": ROLES_CHANNEL, "admin_channel": ADMIN_CHANNEL}, file, indent=4)
    embed = discord.Embed(
        title="‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∞",
        description=f"–¶–µ–Ω–∞ —Ä–æ–ª–∏ {role.name} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –≤ {price} {EMOJIS['gold']}!",
        color=COLORS["success"]
    )
    await ctx.send(embed=embed)

@bot.command(name="toggle_role_sale")
@commands.has_permissions(administrator=True)
async def toggle_role_sale_cmd(ctx, role: discord.Role):
    role_id = str(role.id)
    if "staff" in role.name.lower():
        embed = discord.Embed(
            title="‚ùå –û—à–∏–±–∫–∞",
            description="–†–æ–ª–∏ Staff –Ω–µ–ª—å–∑—è –ø—Ä–æ–¥–∞–≤–∞—Ç—å!",
            color=COLORS["error"]
        )
        await ctx.send(embed=embed)
        return
    if role_id in ROLES_CONFIG:
        del ROLES_CONFIG[role_id]
        status = "—É–¥–∞–ª–µ–Ω–∞ –∏–∑ –ø—Ä–æ–¥–∞–∂–∏"
    else:
        ROLES_CONFIG[role_id] = 50  # –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        status = "–¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –ø—Ä–æ–¥–∞–∂—É —Å —Ü–µ–Ω–æ–π 50 ü™ô"
    with open("config.json", "w") as file:
        json.dump({"TOKEN": TOKEN, "PREFIX": PREFIX, "roles": ROLES_CONFIG, "welcome_channel": WELCOME_CHANNEL, "roles_channel": ROLES_CHANNEL, "admin_channel": ADMIN_CHANNEL}, file, indent=4)
    embed = discord.Embed(
        title="‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∞",
        description=f"–†–æ–ª—å {role.name} {status}!",
        color=COLORS["success"]
    )
    await ctx.send(embed=embed)

@bot.command(name="admin_message")
@commands.has_permissions(administrator=True)
async def admin_message_cmd(ctx):
    embed = discord.Embed(
        title="üì© –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ª–∏—Ü–∞ –±–æ—Ç–∞",
        description="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ –∫–∞–Ω–∞–ª #admin-chat:",
        color=COLORS["purple"]
    )
    await ctx.send(embed=embed, view=AdminMessageView())

async def admin_message(user, interaction):
    await interaction.response.send_modal(
        title="üì© –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ",
        custom_id="admin_message_modal",
        components=[
            discord.ui.TextInput(
                label="–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è",
                style=discord.TextInputStyle.paragraph,
                custom_id="message_content",
                placeholder="–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏...",
                required=True
            )
        ]
    )
    try:
        modal_interaction = await bot.wait_for("modal_submit", check=lambda i: i.custom_id == "admin_message_modal" and i.user == user, timeout=300)
        message_content = modal_interaction.components[0].value
        channel = discord.utils.get(interaction.guild.text_channels, name=ADMIN_CHANNEL.replace("#", "").replace("-", "").lower())
        if channel:
            embed = discord.Embed(
                title="üì¢ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏",
                description=message_content,
                color=COLORS["purple"]
            )
            embed.set_footer(text=f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –æ—Ç {user.name}", icon_url=user.avatar.url if user.avatar else None)
            await channel.send(embed=embed)
            await modal_interaction.response.send_message(embed=discord.Embed(
                title="‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ",
                description="–í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª #admin-chat!",
                color=COLORS["success"]
            ), ephemeral=True)
        else:
            await modal_interaction.response.send_message(embed=discord.Embed(
                title="‚ùå –û—à–∏–±–∫–∞",
                description="–ö–∞–Ω–∞–ª #admin-chat –Ω–µ –Ω–∞–π–¥–µ–Ω!",
                color=COLORS["error"]
            ), ephemeral=True)
    except asyncio.TimeoutError:
        await interaction.followup.send(embed=discord.Embed(
            title="‚è≥ –¢–∞–π–º-–∞—É—Ç",
            description="–í—Ä–µ–º—è –Ω–∞ –≤–≤–æ–¥ –∏—Å—Ç–µ–∫–ª–æ!",
            color=COLORS["error"]
        ), ephemeral=True)

@bot.event
async def on_ready():
    logger.info(f"–ë–æ—Ç {bot.user} –∑–∞–ø—É—â–µ–Ω!")
    print(f"‚úÖ –ë–æ—Ç {bot.user} –∑–∞–ø—É—â–µ–Ω!")
    await bot.change_presence(activity=discord.Activity(type=discord.ActivityType.watching, name="–∑–∞ —Ç–æ–±–æ–π –≤ —à–∞—Ö—Ç–µ!"))

    # –°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é —Ä–æ–ª–µ–π –≤ –∫–∞–Ω–∞–ª–µ #roles
    roles_channel = discord.utils.get(bot.get_all_channels(), name=ROLES_CHANNEL.replace("#", "").replace("-", "").lower())
    if roles_channel:
        embed = discord.Embed(
            title="üè∑ –ú–∞–≥–∞–∑–∏–Ω —Ä–æ–ª–µ–π",
            description="–†–µ–∞–≥–∏—Ä—É–π—Ç–µ –Ω–∞ —ç–º–æ–¥–∑–∏, —á—Ç–æ–±—ã –∫—É–ø–∏—Ç—å —Ä–æ–ª–∏ (—Ü–µ–Ω–∞ —É–∫–∞–∑–∞–Ω–∞ –≤ ü™ô):",
            color=COLORS["gold"]
        )
        for role_id, price in ROLES_CONFIG.items():
            role = discord.utils.get(bot.get_guild(0).roles, id=int(role_id))
            if role:
                embed.add_field(name=f"{role.name}", value=f"–¶–µ–Ω–∞: {price} {EMOJIS['gold']}", inline=True)
        embed.set_image(url="https://i.imgur.com/8pZqL7G.jpeg")  # –ö—Ä–∞—Å–∏–≤–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞
        message = await roles_channel.send(embed=embed, view=RoleShopView())
        await message.pin()

@tasks.loop(minutes=1)
async def track_voice_activity():
    for member_id in list(voice_activity.keys()):
        update_user_data(member_id, gold=1)