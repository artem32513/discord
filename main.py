import discord
from discord.ext import commands, tasks
import asyncio
import json
import os
import random
import sqlite3
import logging
from logging.handlers import RotatingFileHandler
from datetime import datetime, timedelta
from typing import Optional

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
handler = RotatingFileHandler("bot.log", maxBytes=5*1024*1024, backupCount=3)
logging.basicConfig(level=logging.INFO, handlers=[handler], format="%(asctime)s - %(levelname)s - %(message)s")
logger = logging.getLogger()

# –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
try:
    with open("config.json", "r") as file:
        config = json.load(file)
        TOKEN = config.get("TOKEN")
        if not TOKEN:
            raise ValueError("–¢–æ–∫–µ–Ω –±–æ—Ç–∞ –Ω–µ —É–∫–∞–∑–∞–Ω –≤ config.json!")
        PREFIX = config.get("PREFIX", "!")
        ROLES_CONFIG = config.get("roles", {})
        WELCOME_CHANNEL = config.get("welcome_channel", "üîînew-personüîî")
        ROLES_CHANNEL = config.get("roles_channel", "üé≠getting-rolesüé≠")
        ADMIN_CHANNEL = config.get("admin_channel", "üîßdeveloperüîß")
except FileNotFoundError:
    logger.error("–§–∞–π–ª config.json –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    exit(1)
except ValueError as e:
    logger.error(str(e))
    exit(1)

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect('bot_data.db')
cursor = conn.cursor()
cursor.execute('''
    CREATE TABLE IF NOT EXISTS users (
        user_id INTEGER PRIMARY KEY,
        xp INTEGER DEFAULT 0,
        gold INTEGER DEFAULT 0,
        crystals INTEGER DEFAULT 0,
        last_daily TIMESTAMP,
        daily_streak INTEGER DEFAULT 0,
        last_mine TIMESTAMP,
        last_work TIMESTAMP,
        last_profit TIMESTAMP,
        inventory TEXT DEFAULT '[]',
        muted_until TIMESTAMP DEFAULT NULL
    )
''')
cursor.execute('''
    CREATE TABLE IF NOT EXISTS gear (
        user_id INTEGER PRIMARY KEY,
        pickaxe_level INTEGER DEFAULT 0,
        helmet_level INTEGER DEFAULT 0,
        gloves_level INTEGER DEFAULT 0,
        boots_level INTEGER DEFAULT 0
    )
''')
cursor.execute('''
    CREATE TABLE IF NOT EXISTS cases (
        case_id TEXT PRIMARY KEY,
        cost INTEGER,
        rewards TEXT
    )
''')
conn.commit()

# –§—É–Ω–∫—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def get_user_data(user_id):
    cursor.execute('SELECT xp, gold, last_daily, inventory, crystals, daily_streak, last_mine, last_work, last_profit, muted_until FROM users WHERE user_id = ?', (user_id,))
    return cursor.fetchone() or (0, 0, None, '[]', 0, 0, None, None, None, None)

def update_user_data(user_id, xp=None, gold=None, last_daily=None, inventory=None, crystals=None, daily_streak=None, last_mine=None, last_work=None, last_profit=None, muted_until=None):
    with conn:
        cursor.execute('INSERT OR IGNORE INTO users (user_id, xp, gold, inventory, crystals) VALUES (?, 0, 0, ?, 0)', (user_id, '[]'))
        if xp is not None:
            cursor.execute('UPDATE users SET xp = xp + ? WHERE user_id = ?', (xp, user_id))
        if gold is not None:
            cursor.execute('UPDATE users SET gold = gold + ? WHERE user_id = ?', (gold, user_id))
        if last_daily is not None:
            cursor.execute('UPDATE users SET last_daily = ? WHERE user_id = ?', (last_daily, user_id))
        if inventory is not None:
            cursor.execute('UPDATE users SET inventory = ? WHERE user_id = ?', (json.dumps(inventory), user_id))
        if crystals is not None:
            cursor.execute('UPDATE users SET crystals = crystals + ? WHERE user_id = ?', (crystals, user_id))
        if daily_streak is not None:
            cursor.execute('UPDATE users SET daily_streak = ? WHERE user_id = ?', (daily_streak, user_id))
        if last_mine is not None:
            cursor.execute('UPDATE users SET last_mine = ? WHERE user_id = ?', (last_mine, user_id))
        if last_work is not None:
            cursor.execute('UPDATE users SET last_work = ? WHERE user_id = ?', (last_work, user_id))
        if last_profit is not None:
            cursor.execute('UPDATE users SET last_profit = ? WHERE user_id = ?', (last_profit, user_id))
        if muted_until is not None:
            cursor.execute('UPDATE users SET muted_until = ? WHERE user_id = ?', (muted_until, user_id))

def get_gear(user_id):
    cursor.execute('SELECT pickaxe_level, helmet_level, gloves_level, boots_level FROM gear WHERE user_id = ?', (user_id,))
    return cursor.fetchone() or (0, 0, 0, 0)

def update_gear(user_id, pickaxe_level=None, helmet_level=None, gloves_level=None, boots_level=None):
    with conn:
        cursor.execute('INSERT OR IGNORE INTO gear (user_id) VALUES (?)', (user_id,))
        if pickaxe_level is not None:
            cursor.execute('UPDATE gear SET pickaxe_level = ? WHERE user_id = ?', (pickaxe_level, user_id))
        if helmet_level is not None:
            cursor.execute('UPDATE gear SET helmet_level = ? WHERE user_id = ?', (helmet_level, user_id))
        if gloves_level is not None:
            cursor.execute('UPDATE gear SET gloves_level = ? WHERE user_id = ?', (gloves_level, user_id))
        if boots_level is not None:
            cursor.execute('UPDATE gear SET boots_level = ? WHERE user_id = ?', (boots_level, user_id))

def init_cases():
    cursor.execute('DELETE FROM cases')  # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∫–µ–π—Å–æ–≤
    cases = [
        ("common_case", 50, json.dumps([(10, 0.5), (20, 0.3), (30, 0.2)])),  # –ó–æ–ª–æ—Ç–æ, –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å
        ("rare_case", 100, json.dumps([(50, 0.4), (100, 0.3), (150, 0.2), (200, 0.1)])),
        ("legendary_case", 200, json.dumps([(100, 0.3), (200, 0.2), (300, 0.3), (500, 0.2)]))
    ]
    cursor.executemany('INSERT OR IGNORE INTO cases (case_id, cost, rewards) VALUES (?, ?, ?)', cases)
    conn.commit()

init_cases()  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–µ–π—Å–æ–≤ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ

def get_case_rewards(case_id):
    cursor.execute('SELECT rewards FROM cases WHERE case_id = ?', (case_id,))
    rewards = cursor.fetchone()
    return json.loads(rewards[0]) if rewards else []

# –≠–∫–æ–Ω–æ–º–∏–∫–∞
def get_gear_cost(level):
    return int(50 * (1.5 ** level))

def check_cooldown(last_time, cooldown_seconds, action_name):
    now = datetime.utcnow()
    if last_time and (now - datetime.fromisoformat(last_time)).total_seconds() < cooldown_seconds:
        remaining = int(cooldown_seconds - (now - datetime.fromisoformat(last_time)).total_seconds())
        hours = remaining // 3600
        minutes = remaining % 3600 // 60
        seconds = remaining % 60
        return False, f"–ü–æ–¥–æ–∂–¥–∏—Ç–µ {hours} —á {minutes} –º–∏–Ω {seconds} —Å–µ–∫ –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π {action_name}!"
    return True, None

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞
intents = discord.Intents.all()
bot = commands.Bot(command_prefix=PREFIX, intents=intents)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
last_message_time = {}
voice_activity = {}
daily_quests = {}  # –•—Ä–∞–Ω–µ–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

# –¶–≤–µ—Ç–∞ –∏ —ç–º–æ–¥–∑–∏
COLORS = {
    "default": discord.Color.blue(),
    "success": discord.Color.green(),
    "error": discord.Color.red(),
    "gold": discord.Color.gold(),
    "purple": discord.Color.purple(),
    "orange": discord.Color.orange(),
    "rainbow": discord.Color.from_rgb(255, 105, 180)  # –†–æ–∑–æ–≤—ã–π –¥–ª—è —Å—Ç–∏–ª—è
}
EMOJIS = {
    "gold": "ü™ô", "crystals": "üíé", "mine": "‚õè", "work": "üë∑", "profit": "üí∏",
    "daily": "üéÅ", "profile": "üë§", "gear": "‚öí", "rps": "üÜö", "blackjack": "üÉè",
    "transfer": "üí∏", "give": "üéÅ", "buyrole": "üè∑", "cooldowns": "‚è≥", "mute": "üîá",
    "ban": "üö´", "clear": "üßπ", "leaderboards": "üèÜ", "cases": "üé∞", "help": "‚ùì"
}

# –ü—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è (–∫–Ω–æ–ø–∫–∏ –∏ –º–µ–Ω—é)
class ProfileView(discord.ui.View):
    @discord.ui.button(label="–ü—Ä–æ—Ñ–∏–ª—å", style=discord.ButtonStyle.green, emoji=EMOJIS["profile"])
    async def profile_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        await show_profile(interaction.user, interaction)

class GearView(discord.ui.View):
    async def upgrade(self, interaction, gear_name):
        gear_map = {"pickaxe": "pickaxe_level", "helmet": "helmet_level", "gloves": "gloves_level", "boots": "boots_level"}
        _, _, _, _, crystals, _, _, _, _ = get_user_data(interaction.user.id)
        current_level = dict(zip(gear_map.values(), get_gear(interaction.user.id)))[gear_map[gear_name]]
        cost = get_gear_cost(current_level)
        if crystals < cost:
            await interaction.response.send_message(embed=discord.Embed(title="‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ", description=f"–ù—É–∂–Ω–æ {cost} {EMOJIS['crystals']}!", color=COLORS["error"]), ephemeral=True)
            return
        update_user_data(interaction.user.id, crystals=-cost)
        update_gear(interaction.user.id, **{gear_map[gear_name]: current_level + 1})
        await interaction.response.send_message(embed=discord.Embed(title="‚úÖ –£–ª—É—á—à–µ–Ω–æ", description=f"{gear_name.capitalize()} —Ç–µ–ø–µ—Ä—å —É—Ä–æ–≤–Ω—è {current_level + 1}!", color=COLORS["success"]), ephemeral=True)

    @discord.ui.button(label="–ö–∏—Ä–∫–∞", style=discord.ButtonStyle.blurple, emoji=EMOJIS["mine"])
    async def pickaxe(self, interaction: discord.Interaction, button: discord.ui.Button):
        await self.upgrade(interaction, "pickaxe")

    @discord.ui.button(label="–®–ª–µ–º", style=discord.ButtonStyle.blurple, emoji="‚õë")
    async def helmet(self, interaction: discord.Interaction, button: discord.ui.Button):
        await self.upgrade(interaction, "helmet")

    @discord.ui.button(label="–ü–µ—Ä—á–∞—Ç–∫–∏", style=discord.ButtonStyle.blurple, emoji="üß§")
    async def gloves(self, interaction: discord.Interaction, button: discord.ui.Button):
        await self.upgrade(interaction, "gloves")

    @discord.ui.button(label="–ë–æ—Ç–∏–Ω–∫–∏", style=discord.ButtonStyle.blurple, emoji="üë¢")
    async def boots(self, interaction: discord.Interaction, button: discord.ui.Button):
        await self.upgrade(interaction, "boots")

class ActionView(discord.ui.View):
    @discord.ui.button(label="–î–æ–±—ã—Ç—å", style=discord.ButtonStyle.green, emoji=EMOJIS["mine"])
    async def mine(self, interaction: discord.Interaction, button: discord.ui.Button):
        await mine(interaction.user, interaction)

    @discord.ui.button(label="–†–∞–±–æ—Ç–∞—Ç—å", style=discord.ButtonStyle.green, emoji=EMOJIS["work"])
    async def work(self, interaction: discord.Interaction, button: discord.ui.Button):
        await work(interaction.user, interaction)

    @discord.ui.button(label="–ü—Ä–∏–±—ã–ª—å", style=discord.ButtonStyle.green, emoji=EMOJIS["profit"])
    async def profit(self, interaction: discord.Interaction, button: discord.ui.Button):
        await profit(interaction.user, interaction)

    @discord.ui.button(label="–ü—Ä–æ–¥–∞—Ç—å", style=discord.ButtonStyle.red, emoji="üí∞")
    async def sell(self, interaction: discord.Interaction, button: discord.ui.Button):
        await sell_crystals(interaction.user, interaction, 100)

    @discord.ui.button(label="–ï–∂–µ–¥–Ω–µ–≤–∫–∞", style=discord.ButtonStyle.grey, emoji=EMOJIS["daily"])
    async def daily(self, interaction: discord.Interaction, button: discord.ui.Button):
        await daily(interaction.user, interaction)

class ModerationView(discord.ui.View):
    @discord.ui.button(label="–ó–∞–º—É—Ç–∏—Ç—å", style=discord.ButtonStyle.red, emoji=EMOJIS["mute"])
    async def mute(self, interaction: discord.Interaction, button: discord.ui.Button):
        await mute_member(interaction.user, interaction)

    @discord.ui.button(label="–†–∞–∑–º—É—Ç–∏—Ç—å", style=discord.ButtonStyle.green, emoji="üîä")
    async def unmute(self, interaction: discord.Interaction, button: discord.ui.Button):
        await unmute_member(interaction.user, interaction)

    @discord.ui.button(label="–ó–∞–±–∞–Ω–∏—Ç—å", style=discord.ButtonStyle.red, emoji=EMOJIS["ban"])
    async def ban(self, interaction: discord.Interaction, button: discord.ui.Button):
        await ban_member(interaction.user, interaction)

    @discord.ui.button(label="–†–∞–∑–±–∞–Ω–∏—Ç—å", style=discord.ButtonStyle.green, emoji="‚úÖ")
    async def unban(self, interaction: discord.Interaction, button: discord.ui.Button):
        await unban_member(interaction.user, interaction)

    @discord.ui.button(label="–û—á–∏—Å—Ç–∏—Ç—å", style=discord.ButtonStyle.red, emoji=EMOJIS["clear"])
    async def clear(self, interaction: discord.Interaction, button: discord.ui.Button):
        await clear_chat(interaction.user, interaction)

class CurrencyView(discord.ui.View):
    @discord.ui.select(
        placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –≤–∞–ª—é—Ç—É",
        options=[
            discord.SelectOption(label="–ó–æ–ª–æ—Ç–æ", emoji=EMOJIS["gold"], value="gold"),
            discord.SelectOption(label="–ö—Ä–∏—Å—Ç–∞–ª–ª—ã", emoji=EMOJIS["crystals"], value="crystals")
        ]
    )
    async def currency_select(self, interaction: discord.Interaction, select: discord.ui.Select):
        await give_currency(interaction.user, interaction, select.values[0])

class CaseView(discord.ui.View):
    @discord.ui.select(
        placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∫–µ–π—Å",
        options=[
            discord.SelectOption(label="–û–±—ã—á–Ω—ã–π", emoji="üé∞", value="common_case", description="50 ü™ô"),
            discord.SelectOption(label="–†–µ–¥–∫–∏–π", emoji="üåü", value="rare_case", description="100 ü™ô"),
            discord.SelectOption(label="–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω—ã–π", emoji="üî•", value="legendary_case", description="200 ü™ô")
        ]
    )
    async def case_select(self, interaction: discord.Interaction, select: discord.ui.Select):
        await open_case(interaction.user, interaction, select.values[0])

# –§—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞
async def show_profile(user, ctx_or_interaction):
    xp, gold, _, _, crystals, daily_streak, _, _, _, muted_until = get_user_data(user.id)
    level = xp // 100
    mute_status = "üîá (–ó–∞–º—É—á–µ–Ω –¥–æ " + muted_until.isoformat() + ")" if muted_until and datetime.utcnow() < datetime.fromisoformat(muted_until) else "üîä (–ù–µ –∑–∞–º—É—á–µ–Ω)"
    embed = discord.Embed(
        title=f"{EMOJIS['profile']} –ü—Ä–æ—Ñ–∏–ª—å {user.name}",
        description=f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ {user.mention}",
        color=COLORS["default"]
    )
    embed.add_field(name="–£—Ä–æ–≤–µ–Ω—å", value=f"{level} (XP: {xp})", inline=True)
    embed.add_field(name="–ó–æ–ª–æ—Ç–æ", value=f"{gold} {EMOJIS['gold']}", inline=True)
    embed.add_field(name="–ö—Ä–∏—Å—Ç–∞–ª–ª—ã", value=f"{crystals} {EMOJIS['crystals']}", inline=True)
    embed.add_field(name="–°—Ç—Ä–∏–∫", value=f"{daily_streak} –¥–Ω–µ–π", inline=True)
    embed.add_field(name="–°—Ç–∞—Ç—É—Å –º—É—Ç–∞", value=mute_status, inline=True)
    embed.set_thumbnail(url=user.avatar.url if user.avatar else None)
    embed.set_image(url="https://i.imgur.com/8pZqL7G.gif")  # –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –∞–Ω–∏–º–µ-–∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    if isinstance(ctx_or_interaction, discord.Interaction):
        await ctx_or_interaction.response.send_message(embed=embed, view=ProfileView(), ephemeral=True)
    else:
        await ctx_or_interaction.send(embed=embed, view=ProfileView())

async def mine(user, interaction):
    _, _, _, _, _, _, last_mine, _, _, _ = get_user_data(user.id)
    can_mine, error = check_cooldown(last_mine, 300, "–¥–æ–±—ã—á–∏")
    if not can_mine:
        await interaction.response.send_message(embed=discord.Embed(title=f"{EMOJIS['cooldowns']} –ö—É–ª–¥–∞—É–Ω", description=error, color=COLORS["error"]), ephemeral=True)
        return
    pickaxe_level, _, _, _ = get_gear(user.id)
    crystals_gain = int(random.randint(5, 15) * (1 + pickaxe_level * 0.05))
    update_user_data(user.id, crystals=crystals_gain, last_mine=datetime.utcnow().isoformat())
    await interaction.response.send_message(embed=discord.Embed(title=f"{EMOJIS['mine']} –î–æ–±—ã—á–∞", description=f"–í—ã –¥–æ–±—ã–ª–∏ {crystals_gain} {EMOJIS['crystals']}!", color=COLORS["success"]), ephemeral=True)

async def work(user, interaction):
    _, _, _, _, _, _, _, last_work, _, _ = get_user_data(user.id)
    can_work, error = check_cooldown(last_work, 3600, "—Ä–∞–±–æ—Ç—ã")
    if not can_work:
        await interaction.response.send_message(embed=discord.Embed(title=f"{EMOJIS['cooldowns']} –ö—É–ª–¥–∞—É–Ω", description=error, color=COLORS["error"]), ephemeral=True)
        return
    gold_gain = random.randint(5, 10)
    update_user_data(user.id, gold=gold_gain, last_work=datetime.utcnow().isoformat())
    await interaction.response.send_message(embed=discord.Embed(title=f"{EMOJIS['work']} –†–∞–±–æ—Ç–∞", description=f"–í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏ {gold_gain} {EMOJIS['gold']}!", color=COLORS["success"]), ephemeral=True)

async def profit(user, interaction):
    _, _, _, _, _, _, _, _, last_profit, _ = get_user_data(user.id)
    can_profit, error = check_cooldown(last_profit, 14400, "–ø—Ä–∏–±—ã–ª–∏")
    if not can_profit:
        await interaction.response.send_message(embed=discord.Embed(title=f"{EMOJIS['cooldowns']} –ö—É–ª–¥–∞—É–Ω", description=error, color=COLORS["error"]), ephemeral=True)
        return
    profit = random.randint(50, 100) if random.random() < 0.2 else 0
    update_user_data(user.id, gold=profit, last_profit=datetime.utcnow().isoformat())
    if profit:
        await interaction.response.send_message(embed=discord.Embed(title=f"{EMOJIS['profit']} –ü—Ä–∏–±—ã–ª—å", description=f"–í—ã –ø–æ–ª—É—á–∏–ª–∏ {profit} {EMOJIS['gold']}!", color=COLORS["success"]), ephemeral=True)
    else:
        await interaction.response.send_message(embed=discord.Embed(title="üòî –ù–µ—É–¥–∞—á–∞", description="–£–¥–∞—á–∞ –Ω–µ –Ω–∞ –≤–∞—à–µ–π —Å—Ç–æ—Ä–æ–Ω–µ!", color=COLORS["error"]), ephemeral=True)

async def sell_crystals(user, interaction, amount):
    _, _, _, _, crystals, _, _, _, _, _ = get_user_data(user.id)
    if amount <= 0 or amount > crystals:
        await interaction.response.send_message(embed=discord.Embed(title="‚ùå –û—à–∏–±–∫–∞", description=f"–£ –≤–∞—Å {crystals} {EMOJIS['crystals']}!", color=COLORS["error"]), ephemeral=True)
        return
    gold_gain = amount // 2
    update_user_data(user.id, crystals=-amount, gold=gold_gain)
    await interaction.response.send_message(embed=discord.Embed(title="üí∞ –ü—Ä–æ–¥–∞–∂–∞", description=f"–í—ã –ø—Ä–æ–¥–∞–ª–∏ {amount} {EMOJIS['crystals']} –∑–∞ {gold_gain} {EMOJIS['gold']}!", color=COLORS["gold"]), ephemeral=True)

async def daily(user, interaction):
    _, _, last_daily, _, _, daily_streak, _, _, _, _ = get_user_data(user.id)
    can_daily, error = check_cooldown(last_daily, 86400, "–µ–∂–µ–¥–Ω–µ–≤–∫–∏")
    if not can_daily:
        await interaction.response.send_message(embed=discord.Embed(title="‚ùå –û—à–∏–±–∫–∞", description=error, color=COLORS["error"]), ephemeral=True)
        return
    multiplier = 1 + (daily_streak * 0.1)
    gold_reward = int(random.randint(10, 20) * multiplier)
    crystals_reward = int(random.randint(5, 10) * multiplier)
    new_streak = daily_streak + 1 if last_daily and (datetime.utcnow() - datetime.fromisoformat(last_daily)).days == 1 else 1
    update_user_data(user.id, gold=gold_reward, crystals=crystals_reward, last_daily=datetime.utcnow().isoformat(), daily_streak=new_streak)
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–∞–Ω–∏–π
    if user.id in daily_quests:
        quest = daily_quests[user.id]
        if quest["type"] == "messages" and quest["progress"] >= quest["target"]:
            extra_gold = 20
            update_user_data(user.id, gold=extra_gold)
            await interaction.followup.send(embed=discord.Embed(title="üéâ –ó–∞–≤–µ—Ä—à–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–µ!", description=f"–í—ã –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –∑–∞–¥–∞–Ω–∏–µ –∏ –ø–æ–ª—É—á–∏–ª–∏ {extra_gold} {EMOJIS['gold']}!", color=COLORS["gold"]), ephemeral=True)
            del daily_quests[user.id]
    await interaction.response.send_message(embed=discord.Embed(title=f"{EMOJIS['daily']} –ï–∂–µ–¥–Ω–µ–≤–∫–∞", description=f"+{gold_reward} {EMOJIS['gold']}, +{crystals_reward} {EMOJIS['crystals']}!\n–°—Ç—Ä–∏–∫: {new_streak}", color=COLORS["gold"]), ephemeral=True)

async def mute_member(user, interaction):
    await interaction.response.send_modal(
        title="üîá –ó–∞–º—É—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        custom_id="mute_modal",
        components=[
            discord.ui.TextInput(
                label="–£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (ID –∏–ª–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ)",
                style=discord.TextInputStyle.short,
                custom_id="target_id",
                placeholder="123456789012345678 –∏–ª–∏ @username",
                required=True
            ),
            discord.ui.TextInput(
                label="–í—Ä–µ–º—è –º—É—Ç–∞ (–≤ –º–∏–Ω—É—Ç–∞—Ö, 0 –¥–ª—è –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ)",
                style=discord.TextInputStyle.short,
                custom_id="duration",
                placeholder="30",
                required=True
            )
        ]
    )
    try:
        modal_interaction = await bot.wait_for("modal_submit", check=lambda i: i.custom_id == "mute_modal" and i.user == user, timeout=300)
        target_id = modal_interaction.components[0].value
        duration = int(modal_interaction.components[1].value)
        try:
            target = await bot.fetch_user(int(target_id)) if target_id.isdigit() else interaction.guild.get_member(int(target_id[2:-1])) or discord.utils.get(interaction.guild.members, name=target_id.split("#")[0])
            if not target:
                await modal_interaction.response.send_message(embed=discord.Embed(title="‚ùå –û—à–∏–±–∫–∞", description="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!", color=COLORS["error"]), ephemeral=True)
                return
            member = interaction.guild.get_member(target.id)
            if member and not interaction.user.top_role > member.top_role:
                await modal_interaction.response.send_message(embed=discord.Embed(title="‚ùå –û—à–∏–±–∫–∞", description="–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!", color=COLORS["error"]), ephemeral=True)
                return
            muted_until = datetime.utcnow() + timedelta(minutes=duration) if duration > 0 else None
            update_user_data(target.id, muted_until=muted_until.isoformat() if muted_until else None)
            role = discord.utils.get(interaction.guild.roles, name="Muted")
            if not role:
                role = await interaction.guild.create_role(name="Muted", permissions=discord.Permissions(text=False))
                for channel in interaction.guild.channels:
                    await channel.set_permissions(role, send_messages=False)
            if member:
                await member.add_roles(role)
            await modal_interaction.response.send_message(embed=discord.Embed(title="üîá –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–º—É—á–µ–Ω", description=f"{target.mention} –∑–∞–º—É—á–µ–Ω –Ω–∞ {duration} –º–∏–Ω" if duration > 0 else "–Ω–∞–≤—Å–µ–≥–¥–∞" + "!", color=COLORS["success"]), ephemeral=True)
        except (ValueError, discord.errors.HTTPException) as e:
            await modal_interaction.response.send_message(embed=discord.Embed(title="‚ùå –û—à–∏–±–∫–∞", description="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∏–ª–∏ –æ—à–∏–±–∫–∞!", color=COLORS["error"]), ephemeral=True)
    except asyncio.TimeoutError:
        await interaction.followup.send(embed=discord.Embed(title="‚è≥ –¢–∞–π–º-–∞—É—Ç", description="–í—Ä–µ–º—è –Ω–∞ –≤–≤–æ–¥ –∏—Å—Ç–µ–∫–ª–æ!", color=COLORS["error"]), ephemeral=True)

async def unmute_member(user, interaction):
    await interaction.response.send_modal(
        title="üîä –†–∞–∑–º—É—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        custom_id="unmute_modal",
        components=[
            discord.ui.TextInput(
                label="–£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (ID –∏–ª–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ)",
                style=discord.TextInputStyle.short,
                custom_id="target_id",
                placeholder="123456789012345678 –∏–ª–∏ @username",
                required=True
            )
        ]
    )
    try:
        modal_interaction = await bot.wait_for("modal_submit", check=lambda i: i.custom_id == "unmute_modal" and i.user == user, timeout=300)
        target_id = modal_interaction.components[0].value
        try:
            target = await bot.fetch_user(int(target_id)) if target_id.isdigit() else interaction.guild.get_member(int(target_id[2:-1])) or discord.utils.get(interaction.guild.members, name=target_id.split("#")[0])
            if not target:
                await modal_interaction.response.send_message(embed=discord.Embed(title="‚ùå –û—à–∏–±–∫–∞", description="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!", color=COLORS["error"]), ephemeral=True)
                return
            member = interaction.guild.get_member(target.id)
            if member and not interaction.user.top_role > member.top_role:
                await modal_interaction.response.send_message(embed=discord.Embed(title="‚ùå –û—à–∏–±–∫–∞", description="–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!", color=COLORS["error"]), ephemeral=True)
                return
            update_user_data(target.id, muted_until=None)
            role = discord.utils.get(interaction.guild.roles, name="Muted")
            if member and role:
                await member.remove_roles(role)
            await modal_interaction.response.send_message(embed=discord.Embed(title="üîä –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–º—É—á–µ–Ω", description=f"{target.mention} —Ä–∞–∑–º—É—á–µ–Ω!", color=COLORS["success"]), ephemeral=True)
        except (ValueError, discord.errors.HTTPException) as e:
            await modal_interaction.response.send_message(embed=discord.Embed(title="‚ùå –û—à–∏–±–∫–∞", description="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∏–ª–∏ –æ—à–∏–±–∫–∞!", color=COLORS["error"]), ephemeral=True)
    except asyncio.TimeoutError:
        await interaction.followup.send(embed=discord.Embed(title="‚è≥ –¢–∞–π–º-–∞—É—Ç", description="–í—Ä–µ–º—è –Ω–∞ –≤–≤–æ–¥ –∏—Å—Ç–µ–∫–ª–æ!", color=COLORS["error"]), ephemeral=True)

async def ban_member(user, interaction):
    await interaction.response.send_modal(
        title="üö´ –ó–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        custom_id="ban_modal",
        components=[
            discord.ui.TextInput(
                label="–£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (ID –∏–ª–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ)",
                style=discord.TextInputStyle.short,
                custom_id="target_id",
                placeholder="123456789012345678 –∏–ª–∏ @username",
                required=True
            ),
            discord.ui.TextInput(
                label="–ü—Ä–∏—á–∏–Ω–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)",
                style=discord.TextInputStyle.short,
                custom_id="reason",
                placeholder="–ù–∞–ø–∏—à–∏—Ç–µ –ø—Ä–∏—á–∏–Ω—É...",
                required=False
            )
        ]
    )
    try:
        modal_interaction = await bot.wait_for("modal_submit", check=lambda i: i.custom_id == "ban_modal" and i.user == user, timeout=300)
        target_id = modal_interaction.components[0].value
        reason = modal_interaction.components[1].value or "–ë–µ–∑ –ø—Ä–∏—á–∏–Ω—ã"
        try:
            target = await bot.fetch_user(int(target_id)) if target_id.isdigit() else interaction.guild.get_member(int(target_id[2:-1])) or discord.utils.get(interaction.guild.members, name=target_id.split("#")[0])
            if not target:
                await modal_interaction.response.send_message(embed=discord.Embed(title="‚ùå –û—à–∏–±–∫–∞", description="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!", color=COLORS["error"]), ephemeral=True)
                return
            member = interaction.guild.get_member(target.id)
            if member and not interaction.user.top_role > member.top_role:
                await modal_interaction.response.send_message(embed=discord.Embed(title="‚ùå –û—à–∏–±–∫–∞", description="–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤!", color=COLORS["error"]), ephemeral=True)
                return
            await interaction.guild.ban(target, reason=reason)
            await modal_interaction.response.send_message(embed=discord.Embed(title="üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω", description=f"{target.mention} –∑–∞–±–∞–Ω–µ–Ω –ø–æ –ø—Ä–∏—á–∏–Ω–µ: {reason}", color=COLORS["success"]), ephemeral=True)
        except (ValueError, discord.errors.HTTPException) as e:
            await modal_interaction.response.send_message(embed=discord.Embed(title="‚ùå –û—à–∏–±–∫–∞", description="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∏–ª–∏ –æ—à–∏–±–∫–∞!", color=COLORS["error"]), ephemeral=True)
    except asyncio.TimeoutError:
        await interaction.followup.send(embed=discord.Embed(title="‚è≥ –¢–∞–π–º-–∞—É—Ç", description="–í—Ä–µ–º—è –Ω–∞ –≤–≤–æ–¥ –∏—Å—Ç–µ–∫–ª–æ!", color=COLORS["error"]), ephemeral=True)

async def unban_member(user, interaction):
    await interaction.response.send_modal(
        title="‚úÖ –†–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è",
        custom_id="unban_modal",
        components=[
            discord.ui.TextInput(
                label="–£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (ID)",
                style=discord.TextInputStyle.short,
                custom_id="target_id",
                placeholder="123456789012345678",
                required=True
            )
        ]
    )
    try:
        modal_interaction = await bot.wait_for("modal_submit", check=lambda i: i.custom_id == "unban_modal" and i.user == user, timeout=300)
        target_id = modal_interaction.components[0].value
        try:
            target = await bot.fetch_user(int(target_id))
            if not target:
                await modal_interaction.response.send_message(embed=discord.Embed(title="‚ùå –û—à–∏–±–∫–∞", description="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!", color=COLORS["error"]), ephemeral=True)
                return
            await interaction.guild.unban(target)
            await modal_interaction.response.send_message(embed=discord.Embed(title="‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ä–∞–∑–±–∞–Ω–µ–Ω", description=f"{target.mention} —Ä–∞–∑–±–∞–Ω–µ–Ω!", color=COLORS["success"]), ephemeral=True)
        except (ValueError, discord.errors.HTTPException) as e:
            await modal_interaction.response.send_message(embed=discord.Embed(title="‚ùå –û—à–∏–±–∫–∞", description="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∏–ª–∏ –æ—à–∏–±–∫–∞!", color=COLORS["error"]), ephemeral=True)
    except asyncio.TimeoutError:
        await interaction.followup.send(embed=discord.Embed(title="‚è≥ –¢–∞–π–º-–∞—É—Ç", description="–í—Ä–µ–º—è –Ω–∞ –≤–≤–æ–¥ –∏—Å—Ç–µ–∫–ª–æ!", color=COLORS["error"]), ephemeral=True)

async def clear_chat(user, interaction):
    await interaction.response.send_modal(
        title="üßπ –û—á–∏—Å—Ç–∫–∞ —á–∞—Ç–∞",
        custom_id="clear_modal",
        components=[
            discord.ui.TextInput(
                label="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è",
                style=discord.TextInputStyle.short,
                custom_id="amount",
                placeholder="10",
                required=True
            )
        ]
    )
    try:
        modal_interaction = await bot.wait_for("modal_submit", check=lambda i: i.custom_id == "clear_modal" and i.user == user, timeout=300)
        amount = int(modal_interaction.components[0].value)
        if amount <= 0 or amount > 100:  # –õ–∏–º–∏—Ç Discord ‚Äî 100 —Å–æ–æ–±—â–µ–Ω–∏–π
            await modal_interaction.response.send_message(embed=discord.Embed(title="‚ùå –û—à–∏–±–∫–∞", description="–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100!", color=COLORS["error"]), ephemeral=True)
            return
        async for message in interaction.channel.history(limit=amount + 1):
            await message.delete()
        await modal_interaction.response.send_message(embed=discord.Embed(title="üßπ –ß–∞—Ç –æ—á–∏—â–µ–Ω", description=f"–£–¥–∞–ª–µ–Ω–æ {amount} —Å–æ–æ–±—â–µ–Ω–∏–π!", color=COLORS["success"]), ephemeral=True)
    except (ValueError, discord.errors.HTTPException) as e:
        await interaction.followup.send(embed=discord.Embed(title="‚ùå –û—à–∏–±–∫–∞", description="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∏–ª–∏ –æ—à–∏–±–∫–∞!", color=COLORS["error"]), ephemeral=True)
    except asyncio.TimeoutError:
        await interaction.followup.send(embed=discord.Embed(title="‚è≥ –¢–∞–π–º-–∞—É—Ç", description="–í—Ä–µ–º—è –Ω–∞ –≤–≤–æ–¥ –∏—Å—Ç–µ–∫–ª–æ!", color=COLORS["error"]), ephemeral=True)

async def leaderboards(ctx):
    cursor.execute('SELECT user_id, xp, gold, crystals FROM users ORDER BY xp DESC LIMIT 10')
    top_users = cursor.fetchall()
    embed = discord.Embed(
        title=f"{EMOJIS['leaderboards']} –¢–æ–ø-10 –∏–≥—Ä–æ–∫–æ–≤",
        color=COLORS["rainbow"]
    )
    for i, (user_id, xp, gold, crystals) in enumerate(top_users, 1):
        user = bot.get_user(user_id)
        embed.add_field(
            name=f"#{i} {user.name if user else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π'}",
            value=f"XP: {xp} | –ó–æ–ª–æ—Ç–æ: {gold} {EMOJIS['gold']} | –ö—Ä–∏—Å—Ç–∞–ª–ª—ã: {crystals} {EMOJIS['crystals']}",
            inline=False
        )
    embed.set_image(url="https://i.imgur.com/8pZqL7G.gif")
    await ctx.send(embed=embed)

async def help_cmd(ctx):
    embed = discord.Embed(
        title=f"{EMOJIS['help']} –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥",
        color=COLORS["purple"]
    )
    commands_list = [
        f"{EMOJIS['profile']} `!profile` ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å",
        f"{EMOJIS['mine']} `!mine` ‚Äî –î–æ–±—ã—Ç—å –∫—Ä–∏—Å—Ç–∞–ª–ª—ã",
        f"{EMOJIS['work']} `!work` ‚Äî –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å –∑–æ–ª–æ—Ç–æ",
        f"{EMOJIS['profit']} `!profit` ‚Äî –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–±—ã–ª—å",
        f"{EMOJIS['daily']} `!daily` ‚Äî –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞",
        f"{EMOJIS['gear']} `!gear` ‚Äî –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏ —É–ª—É—á—à–∏—Ç—å —Å–Ω–∞—Ä—è–∂–µ–Ω–∏–µ",
        f"{EMOJIS['buyrole']} `!buyrole` ‚Äî –ö—É–ø–∏—Ç—å —Ä–æ–ª—å",
        f"{EMOJIS['cooldowns']} `!cooldowns` ‚Äî –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫—É–ª–¥–∞—É–Ω—ã",
        f"{EMOJIS['rps']} `!rps <–æ–ø–ø–æ–Ω–µ–Ω—Ç>` ‚Äî –ò–≥—Ä–∞ –ö–∞–º–µ–Ω—å, –ù–æ–∂–Ω–∏—Ü—ã, –ë—É–º–∞–≥–∞",
        f"{EMOJIS['blackjack']} `!blackjack <–æ–ø–ø–æ–Ω–µ–Ω—Ç> <—Å—Ç–∞–≤–∫–∞>` ‚Äî –ò–≥—Ä–∞ –ë–ª—ç–∫–¥–∂–µ–∫",
        f"{EMOJIS['transfer']} `!transfer <–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å> <–≤–∞–ª—é—Ç–∞> <–∫–æ–ª-–≤–æ>` ‚Äî –ü–µ—Ä–µ–¥–∞—Ç—å –≤–∞–ª—é—Ç—É",
        f"{EMOJIS['leaderboards']} `!leaderboards` ‚Äî –¢–æ–ø-10 –∏–≥—Ä–æ–∫–æ–≤",
        f"{EMOJIS['cases']} `!cases` ‚Äî –û—Ç–∫—Ä—ã—Ç—å –º–µ–Ω—é –∫–µ–π—Å–æ–≤",
        f"{EMOJIS['mute']} `!mute` ‚Äî –ó–∞–º—É—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∞–¥–º–∏–Ω)",
        f"{EMOJIS['ban']} `!ban` ‚Äî –ó–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–∞–¥–º–∏–Ω)",
        f"{EMOJIS['clear']} `!clear` ‚Äî –û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç (–∞–¥–º–∏–Ω)",
        f"{EMOJIS['give']} `!give` ‚Äî –í—ã–¥–∞—Ç—å –≤–∞–ª—é—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–∞–¥–º–∏–Ω)"
    ]
    embed.description = "\n".join(commands_list)
    embed.set_image(url="https://i.imgur.com/8pZqL7G.gif")
    await ctx.send(embed=embed, view=HelpView())

class HelpView(discord.ui.View):
    @discord.ui.button(label="–ü–æ–¥—Ä–æ–±–Ω–µ–µ", style=discord.ButtonStyle.blurple, emoji=EMOJIS["help"])
    async def help_button(self, interaction: discord.Interaction, button: discord.ui.Button):
        await interaction.response.send_message(embed=discord.Embed(
            title="‚ÑπÔ∏è –ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏",
            description="–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã —Å –ø—Ä–µ—Ñ–∏–∫—Å–æ–º `!`. –î–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –Ω—É–∂–Ω—ã –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.\n–ï—Å–ª–∏ –µ—Å—Ç—å –≤–æ–ø—Ä–æ—Å—ã, –æ–±—Ä–∞—â–∞–π—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏!",
            color=COLORS["purple"]
        ), ephemeral=True)

async def give_currency(user, interaction, currency: str):
    await interaction.response.send_modal(
        title=f"{EMOJIS['give']} –í—ã–¥–∞—Ç—å –≤–∞–ª—é—Ç—É",
        custom_id="give_currency_modal",
        components=[
            discord.ui.TextInput(
                label="–£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (ID –∏–ª–∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ)",
                style=discord.TextInputStyle.short,
                custom_id="target_id",
                placeholder="123456789012345678 –∏–ª–∏ @username",
                required=True
            ),
            discord.ui.TextInput(
                label="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ",
                style=discord.TextInputStyle.short,
                custom_id="amount",
                placeholder="50",
                required=True
            )
        ]
    )
    try:
        modal_interaction = await bot.wait_for("modal_submit", check=lambda i: i.custom_id == "give_currency_modal" and i.user == user, timeout=300)
        target_id = modal_interaction.components[0].value
        amount = int(modal_interaction.components[1].value)
        if amount <= 0:
            await modal_interaction.response.send_message(embed=discord.Embed(title="‚ùå –û—à–∏–±–∫–∞", description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º!", color=COLORS["error"]), ephemeral=True)
            return
        try:
            target = await bot.fetch_user(int(target_id)) if target_id.isdigit() else interaction.guild.get_member(int(target_id[2:-1])) or discord.utils.get(interaction.guild.members, name=target_id.split("#")[0])
            if not target:
                await modal_interaction.response.send_message(embed=discord.Embed(title="‚ùå –û—à–∏–±–∫–∞", description="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!", color=COLORS["error"]), ephemeral=True)
                return
            if currency == "gold":
                update_user_data(target.id, gold=amount)
                await modal_interaction.response.send_message(embed=discord.Embed(title=f"{EMOJIS['give']} –í—ã–¥–∞—á–∞ –∑–æ–ª–æ—Ç–∞", description=f"–í—ã–¥–∞–ª–∏ {amount} {EMOJIS['gold']} {target.mention}!", color=COLORS["success"]), ephemeral=True)
            else:  # crystals
                update_user_data(target.id, crystals=amount)
                await modal_interaction.response.send_message(embed=discord.Embed(title="üíé –í—ã–¥–∞—á–∞ –∫—Ä–∏—Å—Ç–∞–ª–ª–æ–≤", description=f"–í—ã–¥–∞–ª–∏ {amount} {EMOJIS['crystals']} {target.mention}!", color=COLORS["success"]), ephemeral=True)
        except (ValueError, discord.errors.HTTPException) as e:
            await modal_interaction.response.send_message(embed=discord.Embed(title="‚ùå –û—à–∏–±–∫–∞", description="–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID –∏–ª–∏ –æ—à–∏–±–∫–∞!", color=COLORS["error"]), ephemeral=True)
    except asyncio.TimeoutError:
        await interaction.followup.send(embed=discord.Embed(title="‚è≥ –¢–∞–π–º-–∞—É—Ç", description="–í—Ä–µ–º—è –Ω–∞ –≤–≤–æ–¥ –∏—Å—Ç–µ–∫–ª–æ!", color=COLORS["error"]), ephemeral=True)

async def open_case(user, interaction, case_id):
    _, gold, _, _, _, _, _, _, _, _ = get_user_data(user.id)
    case = cursor.execute('SELECT cost, rewards FROM cases WHERE case_id = ?', (case_id,)).fetchone()
    if not case:
        await interaction.response.send_message(embed=discord.Embed(title="‚ùå –û—à–∏–±–∫–∞", description="–ö–µ–π—Å –Ω–µ –Ω–∞–π–¥–µ–Ω!", color=COLORS["error"]), ephemeral=True)
        return
    cost, rewards = case
    if gold < cost:
        await interaction.response.send_message(embed=discord.Embed(title="‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ", description=f"–ù—É–∂–Ω–æ {cost} {EMOJIS['gold']}!", color=COLORS["error"]), ephemeral=True)
        return
    rewards_list = get_case_rewards(case_id)
    total_weight = sum(weight for _, weight in rewards_list)
    rand = random.random() * total_weight
    cumulative = 0
    reward = 0
    for value, weight in rewards_list:
        cumulative += weight
        if rand <= cumulative:
            reward = value
            break
    update_user_data(user.id, gold=-cost, gold=reward)
    await interaction.response.send_message(embed=discord.Embed(
        title=f"{EMOJIS['cases']} –í—ã –æ—Ç–∫—Ä—ã–ª–∏ {case_id.replace('_', ' ').title()}",
        description=f"–í—ã –ø–æ—Ç—Ä–∞—Ç–∏–ª–∏ {cost} {EMOJIS['gold']} –∏ –≤—ã–∏–≥—Ä–∞–ª–∏ {reward} {EMOJIS['gold']}!",
        color=COLORS["rainbow"]
    ), ephemeral=True)

# –°–æ–±—ã—Ç–∏—è
@bot.event
async def on_ready():
    logger.info(f"–ë–æ—Ç {bot.user} –∑–∞–ø—É—â–µ–Ω!")
    print(f"‚úÖ –ë–æ—Ç {bot.user} –∑–∞–ø—É—â–µ–Ω!")
    await bot.change_presence(activity=discord.Activity(type=discord.ActivityType.watching, name="–∑–∞ —Ç–æ–±–æ–π –≤ —à–∞—Ö—Ç–µ!"))

@bot.event
async def on_message(message):
    if message.author == bot.user:
        return
    current_time = datetime.utcnow()
    last_time = last_message_time.get(message.author.id, current_time - timedelta(minutes=1))
    if current_time - last_time >= timedelta(minutes=1):
        xp, gold, _, _, crystals, _, _, _, _, _ = get_user_data(message.author.id)
        xp_gain = 2
        update_user_data(message.author.id, xp=xp_gain)
        last_message_time[message.author.id] = current_time
        if xp % 100 == 0:
            update_user_data(message.author.id, gold=10)
            await message.channel.send(embed=discord.Embed(title="üéâ –ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å!", description=f"{message.author.mention} –ø–æ–ª—É—á–∏–ª 10 {EMOJIS['gold']}!", color=COLORS["gold"]))
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
        if message.author.id not in daily_quests:
            daily_quests[message.author.id] = {"type": "messages", "target": random.randint(5, 15), "progress": 0}
        daily_quests[message.author.id]["progress"] += 1
    await bot.process_commands(message)

@bot.event
async def on_typing(channel, user, when):
    if user.bot or channel.type != discord.ChannelType.text or not channel.permissions_for(channel.guild.me).send_messages or channel.guild is None:
        return
    if user.typing and not user.typing_message:
        embed = discord.Embed(
            title="üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã",
            description=f"–ò—Å–ø–æ–ª—å–∑—É–π `{PREFIX}` –ø–µ—Ä–µ–¥ –∫–æ–º–∞–Ω–¥–æ–π:\n\n"
                       f"{EMOJIS['profile']} `profile` ‚Äî –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø—Ä–æ—Ñ–∏–ª—å\n"
                       f"{EMOJIS['mine']} `mine` ‚Äî –î–æ–±—ã—Ç—å –∫—Ä–∏—Å—Ç–∞–ª–ª—ã\n"
                       f"{EMOJIS['work']} `work` ‚Äî –ó–∞—Ä–∞–±–æ—Ç–∞—Ç—å –∑–æ–ª–æ—Ç–æ\n"
                       f"{EMOJIS['profit']} `profit` ‚Äî –ü–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–±—ã–ª—å\n"
                       f"{EMOJIS['daily']} `daily` ‚Äî –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞\n"
                       f"{EMOJIS['gear']} `gear` ‚Äî –°–Ω–∞—Ä—è–∂–µ–Ω–∏–µ\n"
                       f"{EMOJIS['buyrole']} `buyrole` ‚Äî –ö—É–ø–∏—Ç—å —Ä–æ–ª—å\n"
                       f"{EMOJIS['cooldowns']} `cooldowns` ‚Äî –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫—É–ª–¥–∞—É–Ω—ã\n"
                       f"{EMOJIS['rps']} `rps` ‚Äî –ö–∞–º–µ–Ω—å, –ù–æ–∂–Ω–∏—Ü—ã, –ë—É–º–∞–≥–∞\n"
                       f"{EMOJIS['blackjack']} `blackjack` ‚Äî –ë–ª—ç–∫–¥–∂–µ–∫\n"
                       f"{EMOJIS['leaderboards']} `leaderboards` ‚Äî –¢–æ–ø-10 –∏–≥—Ä–æ–∫–æ–≤\n"
                       f"{EMOJIS['cases']} `cases` ‚Äî –û—Ç–∫—Ä—ã—Ç—å –∫–µ–π—Å—ã\n"
                       f"{EMOJIS['help']} `help` ‚Äî –°–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥\n"
                       f"{EMOJIS['mute']} `mute` ‚Äî –ú–æ–¥–µ—Ä–∞—Ü–∏—è (–∞–¥–º–∏–Ω)\n"
                       f"{EMOJIS['ban']} `ban` ‚Äî –ú–æ–¥–µ—Ä–∞—Ü–∏—è (–∞–¥–º–∏–Ω)\n"
                       f"{EMOJIS['clear']} `clear` ‚Äî –û—á–∏—Å—Ç–∫–∞ —á–∞—Ç–∞ (–∞–¥–º–∏–Ω)\n"
                       f"{EMOJIS['give']} `give` ‚Äî –í—ã–¥–∞—Ç—å –≤–∞–ª—é—Ç—É (–∞–¥–º–∏–Ω)",
            color=COLORS["purple"]
        )
        embed.set_thumbnail(url="https://i.imgur.com/8pZqL7G.gif")
        await channel.send(embed=embed, delete_after=10.0)

@bot.event
async def on_voice_state_update(member, before, after):
    if after.channel and not before.channel:
        voice_activity[member.id] = datetime.utcnow()
    elif before.channel and not after.channel and member.id in voice_activity:
        duration = (datetime.utcnow() - voice_activity.pop(member.id)).seconds // 60
        if not before.self_mute and not before.self_deaf:
            earned_gold = duration
            _, helmet_level, _, _ = get_gear(member.id)
            crystals_gain = int(duration * (1 + helmet_level * 0.05))
            update_user_data(member.id, gold=earned_gold, crystals=crystals_gain)
            try:
                embed = discord.Embed(
                    title="üéô –ì–æ–ª–æ—Å–æ–≤–æ–π —á–∞—Ç",
                    description=f"–í—ã –ø—Ä–æ–≤–µ–ª–∏ {duration} –º–∏–Ω: +{earned_gold} {EMOJIS['gold']}, +{crystals_gain} {EMOJIS['crystals']}!",
                    color=COLORS["blue"]
                )
                embed.set_image(url="https://i.imgur.com/8pZqL7G.gif")
                await member.send(embed=embed)
            except discord.Forbidden:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {member.id}")

@bot.event
async def on_member_join(member):
    channel = discord.utils.get(member.guild.text_channels, name=WELCOME_CHANNEL.replace("üîî", "").replace("-", "").lower())
    if channel:
        embed = discord.Embed(
            title=f"üåü –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {member.name}!",
            description=f"–ü—Ä–∏–≤–µ—Ç {member.mention}, —Ç–µ–ø–µ—Ä—å —Ç—ã –Ω–æ–≤—ã–π —É—á–∞—Å—Ç–Ω–∏–∫ Forever Alone.\n–ü–µ—Ä–µ–π–¥–∏ –∫ –∫–∞–Ω–∞–ª—É #rules, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –ø—Ä–∞–≤–∏–ª–∞!",
            color=COLORS["rainbow"]
        )
        embed.set_thumbnail(url="https://i.imgur.com/8pZqL7G.gif")  # –ê–Ω–∏–º–µ-–∞–≤–∞—Ç–∞—Ä
        embed.set_image(url="https://i.imgur.com/8pZqL7G.gif")  # –ê–Ω–∏–º–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ñ–æ–Ω –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
        await channel.send(embed=embed)

# –ö–æ–º–∞–Ω–¥—ã
@bot.command()
async def profile(ctx):
    await show_profile(ctx.author, ctx)

@bot.command()
async def mine(ctx):
    await mine(ctx.author, ctx)

@bot.command()
async def work(ctx):
    await work(ctx.author, ctx)

@bot.command()
async def profit(ctx):
    await profit(ctx.author, ctx)

@bot.command()
async def sell(ctx, amount: int):
    await sell_crystals(ctx.author, ctx, amount)

@bot.command()
async def daily(ctx):
    await daily(ctx.author, ctx)

@bot.command()
async def gear(ctx):
    pickaxe, helmet, gloves, boots = get_gear(ctx.author.id)
    embed = discord.Embed(
        title=f"{EMOJIS['gear']} –°–Ω–∞—Ä—è–∂–µ–Ω–∏–µ —à–∞—Ö—Ç—ë—Ä–∞",
        description=f"–¢–≤–æ—ë –æ–±–æ—Ä—É–¥–æ–≤–∞–Ω–∏–µ, {ctx.author.mention}",
        color=COLORS["orange"]
    )
    embed.add_field(name="–ö–∏—Ä–∫–∞ ‚õè", value=f"–£—Ä. {pickaxe}: +{pickaxe * 5}% –∫ –¥–æ–±—ã—á–µ", inline=True)
    embed.add_field(name="–®–ª–µ–º ‚õë", value=f"–£—Ä. {helmet}: +{helmet * 5}% –∫ –≥–æ–ª–æ—Å–æ–≤—ã–º üíé", inline=True)
    embed.add_field(name="–ü–µ—Ä—á–∞—Ç–∫–∏ üß§", value=f"–£—Ä. {gloves}: +{gloves * 5}% –∫ —Ç–µ–∫—Å—Ç–æ–≤—ã–º üíé", inline=True)
    embed.add_field(name="–ë–æ—Ç–∏–Ω–∫–∏ üë¢", value=f"–£—Ä. {boots}: +{boots * 5}% –∫ –µ–∂–µ–¥–Ω–µ–≤–∫–µ", inline=True)
    embed.set_thumbnail(url="https://i.imgur.com/8pZqL7G.gif")
    await ctx.send(embed=embed, view=GearView())

@bot.command()
async def actions(ctx):
    embed = discord.Embed(
        title="üéÆ –î–µ–π—Å—Ç–≤–∏—è",
        description="–í—ã–±–µ—Ä–∏, —á—Ç–æ –¥–µ–ª–∞—Ç—å!",
        color=COLORS["default"]
    )
    embed.set_image(url="https://i.imgur.com/8pZqL7G.gif")
    await ctx.send(embed=embed, view=ActionView())

@bot.command()
async def buyrole(ctx):
    embed = discord.Embed(
        title=f"{EMOJIS['buyrole']} –ú–∞–≥–∞–∑–∏–Ω —Ä–æ–ª–µ–π",
        description=f"–í—ã–±–µ—Ä–∏ —Ä–æ–ª—å –¥–ª—è –ø–æ–∫—É–ø–∫–∏, {ctx.author.mention}",
        color=COLORS["gold"]
    )
    for role_id, price in ROLES_CONFIG.items():
        role = discord.utils.get(ctx.guild.roles, id=int(role_id))
        if role:
            embed.add_field(name=f"{role.name}", value=f"–¶–µ–Ω–∞: {price} {EMOJIS['gold']}", inline=True)
    embed.set_thumbnail(url="https://i.imgur.com/8pZqL7G.gif")
    await ctx.send(embed=embed, view=RoleShopView())

@bot.command()
@commands.has_permissions(administrator=True)
async def moderation(ctx):
    embed = discord.Embed(
        title="üîß –ú–µ–Ω—é –º–æ–¥–µ—Ä–∞—Ü–∏–∏",
        description="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏!",
        color=COLORS["purple"]
    )
    embed.set_image(url="https://i.imgur.com/8pZqL7G.gif")
    await ctx.send(embed=embed, view=ModerationView())

@bot.command()
@commands.has_permissions(administrator=True)
async def give(ctx):
    embed = discord.Embed(
        title=f"{EMOJIS['give']} –í—ã–¥–∞—Ç—å –≤–∞–ª—é—Ç—É",
        description="–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –≤–∞–ª—é—Ç—ã –¥–ª—è –≤—ã–¥–∞—á–∏!",
        color=COLORS["gold"]
    )
    embed.set_image(url="https://i.imgur.com/8pZqL7G.gif")
    await ctx.send(embed=embed, view=CurrencyView())

@bot.command()
async def cases(ctx):
    embed = discord.Embed(
        title=f"{EMOJIS['cases']} –ú–µ–Ω—é –∫–µ–π—Å–æ–≤",
        description="–í—ã–±–µ—Ä–∏—Ç–µ –∫–µ–π—Å –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è!",
        color=COLORS["rainbow"]
    )
    embed.set_image(url="https://i.imgur.com/8pZqL7G.gif")
    await ctx.send(embed=embed, view=CaseView())

@bot.command()
async def leaderboards(ctx):
    await leaderboards(ctx)

@bot.command()
async def help(ctx):
    await help_cmd(ctx)

@bot.command()
async def cooldowns(ctx):
    _, _, _, _, _, _, last_mine, last_work, last_profit, _ = get_user_data(ctx.author.id)
    now = datetime.utcnow()
    cooldowns = []
    
    if last_mine:
        can_mine, error = check_cooldown(last_mine, 300, "–¥–æ–±—ã—á–∏")
        if not can_mine:
            cooldowns.append(error)
    
    if last_work:
        can_work, error = check_cooldown(last_work, 3600, "—Ä–∞–±–æ—Ç—ã")
        if not can_work:
            cooldowns.append(error)
    
    if last_profit:
        can_profit, error = check_cooldown(last_profit, 14400, "–ø—Ä–∏–±—ã–ª–∏")
        if not can_profit:
            cooldowns.append(error)
    
    if last_daily := get_user_data(ctx.author.id)[2]:
        can_daily, error = check_cooldown(last_daily, 86400, "–µ–∂–µ–¥–Ω–µ–≤–∫–∏")
        if not can_daily:
            cooldowns.append(error)
    
    if cooldowns:
        embed = discord.Embed(
            title=f"{EMOJIS['cooldowns']} –ö—É–ª–¥–∞—É–Ω—ã",
            description="\n".join(cooldowns),
            color=COLORS["error"]
        )
        embed.set_image(url="https://i.imgur.com/8pZqL7G.gif")
        await ctx.send(embed=embed)
    else:
        embed = discord.Embed(
            title="‚úÖ –ö—É–ª–¥–∞—É–Ω—ã",
            description=f"{ctx.author.mention}, –≤—Å–µ –¥–µ–π—Å—Ç–≤–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã!",
            color=COLORS["success"]
        )
        embed.set_image(url="https://i.imgur.com/8pZqL7G.gif")
        await ctx.send(embed=embed)

# –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å
@tasks.loop(minutes=1)
async def track_voice_activity():
    for member_id in list(voice_activity.keys()):
        update_user_data(member_id, gold=1)

@tasks.loop(hours=24)
async def reset_daily_quests():
    global daily_quests
    daily_quests = {}
    for guild in bot.guilds:
        channel = discord.utils.get(guild.text_channels, name=WELCOME_CHANNEL.replace("üîî", "").replace("-", "").lower())
        if channel:
            embed = discord.Embed(
                title="üåü –ù–æ–≤—ã–µ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è!",
                description="–í—ã–ø–æ–ª–Ω—è–π—Ç–µ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –±–æ–Ω—É—Å–æ–≤! –°–µ–≥–æ–¥–Ω—è: –Ω–∞–ø–∏—à–∏—Ç–µ 5-15 —Å–æ–æ–±—â–µ–Ω–∏–π.",
                color=COLORS["rainbow"]
            )
            embed.set_image(url="https://i.imgur.com/8pZqL7G.gif")
            await channel.send(embed=embed)

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
if __name__ == "__main__":
    track_voice_activity.start()
    reset_daily_quests.start()
    bot.run(TOKEN)
